// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_Mat_exit75_pro (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        shrink_x_max,
        shrink_y_min,
        shrink_y_max,
        bound_x_max,
        bound_x_max_ap_vld,
        bound_y_min,
        bound_y_min_ap_vld,
        bound_y_max,
        bound_y_max_ap_vld,
        rows,
        cols,
        shrink_x_min,
        bound_x_min,
        bound_x_min_ap_vld,
        img_1_rows_V_out_din,
        img_1_rows_V_out_full_n,
        img_1_rows_V_out_write,
        img_1_cols_V_out_din,
        img_1_cols_V_out_full_n,
        img_1_cols_V_out_write,
        bound_x_min_r_out_out_din,
        bound_x_min_r_out_out_full_n,
        bound_x_min_r_out_out_write,
        bound_x_max_r_out_out_din,
        bound_x_max_r_out_out_full_n,
        bound_x_max_r_out_out_write,
        bound_y_min_r_out_out_din,
        bound_y_min_r_out_out_full_n,
        bound_y_min_r_out_out_write,
        bound_y_max_r_out_out_din,
        bound_y_max_r_out_out_full_n,
        bound_y_max_r_out_out_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] shrink_x_max;
input  [7:0] shrink_y_min;
input  [7:0] shrink_y_max;
input  [15:0] bound_x_max;
input   bound_x_max_ap_vld;
input  [15:0] bound_y_min;
input   bound_y_min_ap_vld;
input  [15:0] bound_y_max;
input   bound_y_max_ap_vld;
input  [31:0] rows;
input  [31:0] cols;
input  [7:0] shrink_x_min;
input  [15:0] bound_x_min;
input   bound_x_min_ap_vld;
output  [31:0] img_1_rows_V_out_din;
input   img_1_rows_V_out_full_n;
output   img_1_rows_V_out_write;
output  [31:0] img_1_cols_V_out_din;
input   img_1_cols_V_out_full_n;
output   img_1_cols_V_out_write;
output  [15:0] bound_x_min_r_out_out_din;
input   bound_x_min_r_out_out_full_n;
output   bound_x_min_r_out_out_write;
output  [15:0] bound_x_max_r_out_out_din;
input   bound_x_max_r_out_out_full_n;
output   bound_x_max_r_out_out_write;
output  [15:0] bound_y_min_r_out_out_din;
input   bound_y_min_r_out_out_full_n;
output   bound_y_min_r_out_out_write;
output  [15:0] bound_y_max_r_out_out_din;
input   bound_y_max_r_out_out_full_n;
output   bound_y_max_r_out_out_write;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_1_rows_V_out_write;
reg img_1_cols_V_out_write;
reg bound_x_min_r_out_out_write;
reg bound_x_max_r_out_out_write;
reg bound_y_min_r_out_out_write;
reg bound_y_max_r_out_out_write;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    bound_x_max_blk_n;
wire    ap_CS_fsm_state2;
reg    bound_y_min_blk_n;
reg    bound_y_max_blk_n;
reg    bound_x_min_blk_n;
reg    img_1_rows_V_out_blk_n;
reg    img_1_cols_V_out_blk_n;
reg    bound_x_min_r_out_out_blk_n;
reg    bound_x_max_r_out_out_blk_n;
reg    bound_y_min_r_out_out_blk_n;
reg    bound_y_max_r_out_out_blk_n;
wire   [16:0] tmp_i_fu_250_p2;
reg   [16:0] tmp_i_reg_418;
reg    ap_block_state1;
wire   [15:0] tmp_10_i_fu_260_p2;
reg   [15:0] tmp_10_i_reg_423;
wire   [16:0] tmp_17_i_fu_266_p2;
reg   [16:0] tmp_17_i_reg_428;
wire   [15:0] tmp_20_i_fu_276_p2;
reg   [15:0] tmp_20_i_reg_433;
reg    ap_block_state2;
wire   [16:0] tmp_4_cast_i_fu_246_p1;
wire   [16:0] tmp_cast_i_fu_242_p1;
wire   [15:0] tmp_9_i_fu_256_p1;
wire   [16:0] tmp_6_cast_i_fu_238_p1;
wire   [16:0] tmp_2_cast_i_fu_234_p1;
wire   [15:0] tmp_19_i_fu_272_p1;
wire   [31:0] tmp_cast_i_30_fu_298_p1;
wire   [0:0] tmp_8_i_fu_301_p2;
wire   [15:0] tmp_fu_307_p1;
wire   [16:0] tmp_5_cast_i_fu_290_p1;
wire   [16:0] tmp_1_cast_i_fu_282_p1;
wire   [16:0] tmp_13_i_fu_319_p2;
wire   [15:0] tmp_15_i_fu_333_p1;
wire   [0:0] tmp_2_fu_325_p3;
wire   [15:0] tmp_16_i_fu_337_p2;
wire   [31:0] tmp_17_cast_i_fu_352_p1;
wire   [0:0] tmp_18_i_fu_355_p2;
wire   [15:0] tmp_3_fu_361_p1;
wire   [16:0] tmp_7_cast_i_fu_294_p1;
wire   [16:0] tmp_3_cast_i_fu_286_p1;
wire   [16:0] tmp_23_i_fu_373_p2;
wire   [15:0] tmp_25_i_fu_387_p1;
wire   [0:0] tmp_4_fu_379_p3;
wire   [15:0] tmp_26_i_fu_391_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_0_preg <= rows;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_1_preg <= cols;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_10_i_reg_423 <= tmp_10_i_fu_260_p2;
        tmp_17_i_reg_428 <= tmp_17_i_fu_266_p2;
        tmp_20_i_reg_433 <= tmp_20_i_fu_276_p2;
        tmp_i_reg_418 <= tmp_i_fu_250_p2;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_0 = rows;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_1 = cols;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_x_max_blk_n = bound_x_max_ap_vld;
    end else begin
        bound_x_max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_x_max_r_out_out_blk_n = bound_x_max_r_out_out_full_n;
    end else begin
        bound_x_max_r_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        bound_x_max_r_out_out_write = 1'b1;
    end else begin
        bound_x_max_r_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_min_blk_n = bound_x_min_ap_vld;
    end else begin
        bound_x_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_x_min_r_out_out_blk_n = bound_x_min_r_out_out_full_n;
    end else begin
        bound_x_min_r_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        bound_x_min_r_out_out_write = 1'b1;
    end else begin
        bound_x_min_r_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_y_max_blk_n = bound_y_max_ap_vld;
    end else begin
        bound_y_max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_y_max_r_out_out_blk_n = bound_y_max_r_out_out_full_n;
    end else begin
        bound_y_max_r_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        bound_y_max_r_out_out_write = 1'b1;
    end else begin
        bound_y_max_r_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_min_blk_n = bound_y_min_ap_vld;
    end else begin
        bound_y_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_y_min_r_out_out_blk_n = bound_y_min_r_out_out_full_n;
    end else begin
        bound_y_min_r_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        bound_y_min_r_out_out_write = 1'b1;
    end else begin
        bound_y_min_r_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_1_cols_V_out_blk_n = img_1_cols_V_out_full_n;
    end else begin
        img_1_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        img_1_cols_V_out_write = 1'b1;
    end else begin
        img_1_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_1_rows_V_out_blk_n = img_1_rows_V_out_full_n;
    end else begin
        img_1_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        img_1_rows_V_out_write = 1'b1;
    end else begin
        img_1_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((bound_y_max_r_out_out_full_n == 1'b0) | (bound_y_min_r_out_out_full_n == 1'b0) | (bound_x_max_r_out_out_full_n == 1'b0) | (bound_x_min_r_out_out_full_n == 1'b0) | (img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bound_x_max_r_out_out_din = ((tmp_2_fu_325_p3[0:0] === 1'b1) ? 16'd0 : tmp_16_i_fu_337_p2);

assign bound_x_min_r_out_out_din = ((tmp_8_i_fu_301_p2[0:0] === 1'b1) ? tmp_fu_307_p1 : tmp_10_i_reg_423);

assign bound_y_max_r_out_out_din = ((tmp_4_fu_379_p3[0:0] === 1'b1) ? 16'd0 : tmp_26_i_fu_391_p2);

assign bound_y_min_r_out_out_din = ((tmp_18_i_fu_355_p2[0:0] === 1'b1) ? tmp_3_fu_361_p1 : tmp_20_i_reg_433);

assign img_1_cols_V_out_din = cols;

assign img_1_rows_V_out_din = rows;

assign start_out = real_start;

assign tmp_10_i_fu_260_p2 = (bound_x_min + tmp_9_i_fu_256_p1);

assign tmp_13_i_fu_319_p2 = (tmp_5_cast_i_fu_290_p1 - tmp_1_cast_i_fu_282_p1);

assign tmp_15_i_fu_333_p1 = shrink_x_max;

assign tmp_16_i_fu_337_p2 = (bound_x_max - tmp_15_i_fu_333_p1);

assign tmp_17_cast_i_fu_352_p1 = tmp_17_i_reg_428;

assign tmp_17_i_fu_266_p2 = (tmp_6_cast_i_fu_238_p1 + tmp_2_cast_i_fu_234_p1);

assign tmp_18_i_fu_355_p2 = (($signed(tmp_17_cast_i_fu_352_p1) > $signed(rows)) ? 1'b1 : 1'b0);

assign tmp_19_i_fu_272_p1 = shrink_y_min;

assign tmp_1_cast_i_fu_282_p1 = shrink_x_max;

assign tmp_20_i_fu_276_p2 = (bound_y_min + tmp_19_i_fu_272_p1);

assign tmp_23_i_fu_373_p2 = (tmp_7_cast_i_fu_294_p1 - tmp_3_cast_i_fu_286_p1);

assign tmp_25_i_fu_387_p1 = shrink_y_max;

assign tmp_26_i_fu_391_p2 = (bound_y_max - tmp_25_i_fu_387_p1);

assign tmp_2_cast_i_fu_234_p1 = shrink_y_min;

assign tmp_2_fu_325_p3 = tmp_13_i_fu_319_p2[32'd16];

assign tmp_3_cast_i_fu_286_p1 = shrink_y_max;

assign tmp_3_fu_361_p1 = rows[15:0];

assign tmp_4_cast_i_fu_246_p1 = bound_x_min;

assign tmp_4_fu_379_p3 = tmp_23_i_fu_373_p2[32'd16];

assign tmp_5_cast_i_fu_290_p1 = bound_x_max;

assign tmp_6_cast_i_fu_238_p1 = bound_y_min;

assign tmp_7_cast_i_fu_294_p1 = bound_y_max;

assign tmp_8_i_fu_301_p2 = (($signed(tmp_cast_i_30_fu_298_p1) > $signed(cols)) ? 1'b1 : 1'b0);

assign tmp_9_i_fu_256_p1 = shrink_x_min;

assign tmp_cast_i_30_fu_298_p1 = tmp_i_reg_418;

assign tmp_cast_i_fu_242_p1 = shrink_x_min;

assign tmp_fu_307_p1 = cols[15:0];

assign tmp_i_fu_250_p2 = (tmp_4_cast_i_fu_246_p1 + tmp_cast_i_fu_242_p1);

endmodule //Block_Mat_exit75_pro
