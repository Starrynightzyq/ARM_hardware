// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module create_mask (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        img_1_rows_V_dout,
        img_1_rows_V_empty_n,
        img_1_rows_V_read,
        img_1_cols_V_dout,
        img_1_cols_V_empty_n,
        img_1_cols_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        bound_x_min_r_loc_dout,
        bound_x_min_r_loc_empty_n,
        bound_x_min_r_loc_read,
        bound_x_max_r_loc_dout,
        bound_x_max_r_loc_empty_n,
        bound_x_max_r_loc_read,
        bound_y_min_r_loc_dout,
        bound_y_min_r_loc_empty_n,
        bound_y_min_r_loc_read,
        bound_y_max_r_loc_dout,
        bound_y_max_r_loc_empty_n,
        bound_y_max_r_loc_read,
        img_1_rows_V_out_din,
        img_1_rows_V_out_full_n,
        img_1_rows_V_out_write,
        img_1_cols_V_out_din,
        img_1_cols_V_out_full_n,
        img_1_cols_V_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
input  [31:0] img_1_rows_V_dout;
input   img_1_rows_V_empty_n;
output   img_1_rows_V_read;
input  [31:0] img_1_cols_V_dout;
input   img_1_cols_V_empty_n;
output   img_1_cols_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
input  [15:0] bound_x_min_r_loc_dout;
input   bound_x_min_r_loc_empty_n;
output   bound_x_min_r_loc_read;
input  [15:0] bound_x_max_r_loc_dout;
input   bound_x_max_r_loc_empty_n;
output   bound_x_max_r_loc_read;
input  [15:0] bound_y_min_r_loc_dout;
input   bound_y_min_r_loc_empty_n;
output   bound_y_min_r_loc_read;
input  [15:0] bound_y_max_r_loc_dout;
input   bound_y_max_r_loc_empty_n;
output   bound_y_max_r_loc_read;
output  [31:0] img_1_rows_V_out_din;
input   img_1_rows_V_out_full_n;
output   img_1_rows_V_out_write;
output  [31:0] img_1_cols_V_out_din;
input   img_1_cols_V_out_full_n;
output   img_1_cols_V_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_data_stream_V_read;
reg img_1_rows_V_read;
reg img_1_cols_V_read;
reg dst_data_stream_V_write;
reg bound_x_min_r_loc_read;
reg bound_x_max_r_loc_read;
reg bound_y_min_r_loc_read;
reg bound_y_max_r_loc_read;
reg img_1_rows_V_out_write;
reg img_1_cols_V_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_reg_396;
reg    img_1_rows_V_blk_n;
reg    img_1_cols_V_blk_n;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_i_i_reg_396_pp0_iter1_reg;
reg    bound_x_min_r_loc_blk_n;
reg    bound_x_max_r_loc_blk_n;
reg    bound_y_min_r_loc_blk_n;
reg    bound_y_max_r_loc_blk_n;
reg    img_1_rows_V_out_blk_n;
reg    img_1_cols_V_out_blk_n;
reg   [31:0] t_V_1_reg_260;
reg   [31:0] rows_V_reg_352;
reg    ap_block_state1;
reg   [31:0] cols_V_reg_357;
wire   [31:0] tmp_i_i_fu_271_p1;
reg   [31:0] tmp_i_i_reg_362;
wire   [31:0] tmp_i_i_15_fu_275_p1;
reg   [31:0] tmp_i_i_15_reg_367;
wire   [31:0] tmp_27_i_i_fu_279_p1;
reg   [31:0] tmp_27_i_i_reg_372;
wire   [31:0] tmp_28_i_i_fu_283_p1;
reg   [31:0] tmp_28_i_i_reg_377;
wire   [0:0] exitcond1_i_i_fu_287_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_292_p2;
reg   [31:0] i_V_reg_386;
wire   [0:0] tmp1_fu_308_p2;
reg   [0:0] tmp1_reg_391;
wire   [0:0] exitcond_i_i_fu_314_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] j_V_fu_319_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_31_i_i_fu_325_p2;
reg   [0:0] tmp_31_i_i_reg_405;
wire   [0:0] tmp_32_i_i_fu_330_p2;
reg   [0:0] tmp_32_i_i_reg_410;
wire   [7:0] tmp_1_fu_344_p3;
reg   [7:0] tmp_1_reg_415;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [31:0] t_V_reg_249;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_29_i_i_fu_298_p2;
wire   [0:0] tmp_30_i_i_fu_303_p2;
wire   [0:0] tmp2_fu_335_p2;
wire   [0:0] brmerge2_i_i_fu_339_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_287_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_i_i_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((exitcond1_i_i_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_260 <= j_V_fu_319_p2;
    end else if (((exitcond1_i_i_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_260 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_reg_249 <= i_V_reg_386;
    end else if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_249 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_V_reg_357 <= img_1_cols_V_dout;
        rows_V_reg_352 <= img_1_rows_V_dout;
        tmp_27_i_i_reg_372[15 : 0] <= tmp_27_i_i_fu_279_p1[15 : 0];
        tmp_28_i_i_reg_377[15 : 0] <= tmp_28_i_i_fu_283_p1[15 : 0];
        tmp_i_i_15_reg_367[15 : 0] <= tmp_i_i_15_fu_275_p1[15 : 0];
        tmp_i_i_reg_362[15 : 0] <= tmp_i_i_fu_271_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_i_reg_396 <= exitcond_i_i_fu_314_p2;
        exitcond_i_i_reg_396_pp0_iter1_reg <= exitcond_i_i_reg_396;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_386 <= i_V_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_i_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp1_reg_391 <= tmp1_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_reg_396 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_415 <= tmp_1_fu_344_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_31_i_i_reg_405 <= tmp_31_i_i_fu_325_p2;
        tmp_32_i_i_reg_410 <= tmp_32_i_i_fu_330_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_314_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_287_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_max_r_loc_blk_n = bound_x_max_r_loc_empty_n;
    end else begin
        bound_x_max_r_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_max_r_loc_read = 1'b1;
    end else begin
        bound_x_max_r_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_min_r_loc_blk_n = bound_x_min_r_loc_empty_n;
    end else begin
        bound_x_min_r_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_min_r_loc_read = 1'b1;
    end else begin
        bound_x_min_r_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_max_r_loc_blk_n = bound_y_max_r_loc_empty_n;
    end else begin
        bound_y_max_r_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_max_r_loc_read = 1'b1;
    end else begin
        bound_y_max_r_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_min_r_loc_blk_n = bound_y_min_r_loc_empty_n;
    end else begin
        bound_y_min_r_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_min_r_loc_read = 1'b1;
    end else begin
        bound_y_min_r_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_396_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_396_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_cols_V_blk_n = img_1_cols_V_empty_n;
    end else begin
        img_1_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_cols_V_out_blk_n = img_1_cols_V_out_full_n;
    end else begin
        img_1_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_cols_V_out_write = 1'b1;
    end else begin
        img_1_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_cols_V_read = 1'b1;
    end else begin
        img_1_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_rows_V_blk_n = img_1_rows_V_empty_n;
    end else begin
        img_1_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_rows_V_out_blk_n = img_1_rows_V_out_full_n;
    end else begin
        img_1_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_rows_V_out_write = 1'b1;
    end else begin
        img_1_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_rows_V_read = 1'b1;
    end else begin
        img_1_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_287_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_396 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_396 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_287_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_fu_314_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_fu_314_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_i_i_reg_396 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_i_i_reg_396_pp0_iter1_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_i_i_reg_396 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_i_i_reg_396_pp0_iter1_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_i_i_reg_396 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_i_i_reg_396_pp0_iter1_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((img_1_cols_V_out_full_n == 1'b0) | (img_1_rows_V_out_full_n == 1'b0) | (bound_y_max_r_loc_empty_n == 1'b0) | (bound_y_min_r_loc_empty_n == 1'b0) | (bound_x_max_r_loc_empty_n == 1'b0) | (bound_x_min_r_loc_empty_n == 1'b0) | (img_1_cols_V_empty_n == 1'b0) | (img_1_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_i_i_reg_396 == 1'd0) & (src_data_stream_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((exitcond_i_i_reg_396_pp0_iter1_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign brmerge2_i_i_fu_339_p2 = (tmp2_fu_335_p2 | tmp1_reg_391);

assign dst_data_stream_V_din = tmp_1_reg_415;

assign exitcond1_i_i_fu_287_p2 = ((t_V_reg_249 == rows_V_reg_352) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_314_p2 = ((t_V_1_reg_260 == cols_V_reg_357) ? 1'b1 : 1'b0);

assign i_V_fu_292_p2 = (t_V_reg_249 + 32'd1);

assign img_1_cols_V_out_din = img_1_cols_V_dout;

assign img_1_rows_V_out_din = img_1_rows_V_dout;

assign j_V_fu_319_p2 = (t_V_1_reg_260 + 32'd1);

assign start_out = real_start;

assign tmp1_fu_308_p2 = (tmp_30_i_i_fu_303_p2 | tmp_29_i_i_fu_298_p2);

assign tmp2_fu_335_p2 = (tmp_32_i_i_reg_410 | tmp_31_i_i_reg_405);

assign tmp_1_fu_344_p3 = ((brmerge2_i_i_fu_339_p2[0:0] === 1'b1) ? 8'd255 : src_data_stream_V_dout);

assign tmp_27_i_i_fu_279_p1 = bound_x_min_r_loc_dout;

assign tmp_28_i_i_fu_283_p1 = bound_x_max_r_loc_dout;

assign tmp_29_i_i_fu_298_p2 = ((t_V_reg_249 < tmp_i_i_reg_362) ? 1'b1 : 1'b0);

assign tmp_30_i_i_fu_303_p2 = ((t_V_reg_249 > tmp_i_i_15_reg_367) ? 1'b1 : 1'b0);

assign tmp_31_i_i_fu_325_p2 = ((t_V_1_reg_260 < tmp_27_i_i_reg_372) ? 1'b1 : 1'b0);

assign tmp_32_i_i_fu_330_p2 = ((t_V_1_reg_260 > tmp_28_i_i_reg_377) ? 1'b1 : 1'b0);

assign tmp_i_i_15_fu_275_p1 = bound_y_max_r_loc_dout;

assign tmp_i_i_fu_271_p1 = bound_y_min_r_loc_dout;

always @ (posedge ap_clk) begin
    tmp_i_i_reg_362[31:16] <= 16'b0000000000000000;
    tmp_i_i_15_reg_367[31:16] <= 16'b0000000000000000;
    tmp_27_i_i_reg_372[31:16] <= 16'b0000000000000000;
    tmp_28_i_i_reg_377[31:16] <= 16'b0000000000000000;
end

endmodule //create_mask
