// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module find_boundary (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_cols_V_dout,
        src_cols_V_empty_n,
        src_cols_V_read,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        threshold_v_dout,
        threshold_v_empty_n,
        threshold_v_read,
        bound_min_address0,
        bound_min_ce0,
        bound_min_we0,
        bound_min_d0,
        bound_max_address0,
        bound_max_ce0,
        bound_max_we0,
        bound_max_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] src_cols_V_dout;
input   src_cols_V_empty_n;
output   src_cols_V_read;
input  [15:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
input  [31:0] threshold_v_dout;
input   threshold_v_empty_n;
output   threshold_v_read;
output  [2:0] bound_min_address0;
output   bound_min_ce0;
output   bound_min_we0;
output  [15:0] bound_min_d0;
output  [2:0] bound_max_address0;
output   bound_max_ce0;
output   bound_max_we0;
output  [15:0] bound_max_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_cols_V_read;
reg src_data_stream_V_read;
reg threshold_v_read;
reg bound_min_ce0;
reg bound_min_we0;
reg bound_max_ce0;
reg bound_max_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_cols_V_blk_n;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    threshold_v_blk_n;
reg   [30:0] i_i_i_reg_166;
wire   [15:0] p_threshold_fu_187_p1;
reg   [15:0] p_threshold_reg_379;
reg    ap_block_state1;
wire   [30:0] length_fu_201_p3;
reg   [30:0] length_reg_385;
wire   [0:0] exitcond_fu_214_p2;
reg   [0:0] exitcond_reg_390;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_fu_219_p2;
reg   [30:0] i_reg_394;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [30:0] ap_phi_mux_i_i_i_phi_fu_170_p4;
wire   [63:0] tmp_3_i_i_fu_274_p1;
wire   [0:0] or_cond_i_i_fu_263_p2;
wire   [63:0] tmp_8_i_i_fu_318_p1;
wire   [0:0] brmerge_i_i_fu_307_p2;
reg   [7:0] character_num_1_fu_114;
wire   [7:0] p_character_num_i_i_fu_249_p3;
wire   [7:0] character_num_fu_345_p3;
reg   [0:0] inBlock_i_i_fu_118;
wire   [0:0] p_inBlock_i_i_fu_243_p2;
wire   [0:0] tmp_i_i_fu_195_p2;
wire   [30:0] tmp_1_fu_191_p1;
wire   [0:0] tmp_9_i_i_fu_231_p2;
wire   [0:0] not_i_i_fu_237_p2;
wire   [0:0] tmp_i_i_27_fu_258_p2;
wire   [0:0] ult_fu_284_p2;
wire   [0:0] rev_fu_289_p2;
wire   [0:0] inBlock_0_not_i_i_fu_295_p2;
wire   [0:0] tmp1_fu_301_p2;
wire   [4:0] tmp_4_fu_323_p4;
wire   [0:0] icmp_fu_333_p2;
wire   [7:0] tmp_11_i_i_fu_339_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (brmerge_i_i_fu_307_p2 == 1'd0) & (or_cond_i_i_fu_263_p2 == 1'd1))) begin
        character_num_1_fu_114 <= character_num_fu_345_p3;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (brmerge_i_i_fu_307_p2 == 1'd1) & (or_cond_i_i_fu_263_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond_i_i_fu_263_p2 == 1'd0)))) begin
        character_num_1_fu_114 <= p_character_num_i_i_fu_249_p3;
    end else if ((~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        character_num_1_fu_114 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_390 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_i_i_reg_166 <= i_reg_394;
    end else if ((~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_reg_166 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (brmerge_i_i_fu_307_p2 == 1'd1) & (or_cond_i_i_fu_263_p2 == 1'd1))) begin
        inBlock_i_i_fu_118 <= p_inBlock_i_i_fu_243_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond_i_i_fu_263_p2 == 1'd0))) begin
        inBlock_i_i_fu_118 <= 1'd1;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (brmerge_i_i_fu_307_p2 == 1'd0) & (or_cond_i_i_fu_263_p2 == 1'd1)) | (~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        inBlock_i_i_fu_118 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_390 <= exitcond_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_394 <= i_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        length_reg_385 <= length_fu_201_p3;
        p_threshold_reg_379 <= p_threshold_fu_187_p1;
    end
end

always @ (*) begin
    if ((exitcond_fu_214_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_390 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_i_i_phi_fu_170_p4 = i_reg_394;
    end else begin
        ap_phi_mux_i_i_i_phi_fu_170_p4 = i_i_i_reg_166;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bound_max_ce0 = 1'b1;
    end else begin
        bound_max_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (brmerge_i_i_fu_307_p2 == 1'd0) & (or_cond_i_i_fu_263_p2 == 1'd1))) begin
        bound_max_we0 = 1'b1;
    end else begin
        bound_max_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bound_min_ce0 = 1'b1;
    end else begin
        bound_min_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond_i_i_fu_263_p2 == 1'd0))) begin
        bound_min_we0 = 1'b1;
    end else begin
        bound_min_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_blk_n = src_cols_V_empty_n;
    end else begin
        src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_read = 1'b1;
    end else begin
        src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_v_blk_n = threshold_v_empty_n;
    end else begin
        threshold_v_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_v_read = 1'b1;
    end else begin
        threshold_v_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_214_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_214_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (threshold_v_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (src_data_stream_V_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_max_address0 = tmp_8_i_i_fu_318_p1;

assign bound_max_d0 = i_i_i_reg_166[15:0];

assign bound_min_address0 = tmp_3_i_i_fu_274_p1;

assign bound_min_d0 = i_i_i_reg_166[15:0];

assign brmerge_i_i_fu_307_p2 = (tmp_9_i_i_fu_231_p2 | tmp1_fu_301_p2);

assign character_num_fu_345_p3 = ((icmp_fu_333_p2[0:0] === 1'b1) ? tmp_11_i_i_fu_339_p2 : p_character_num_i_i_fu_249_p3);

assign exitcond_fu_214_p2 = ((ap_phi_mux_i_i_i_phi_fu_170_p4 == length_reg_385) ? 1'b1 : 1'b0);

assign i_fu_219_p2 = (ap_phi_mux_i_i_i_phi_fu_170_p4 + 31'd1);

assign icmp_fu_333_p2 = ((tmp_4_fu_323_p4 == 5'd0) ? 1'b1 : 1'b0);

assign inBlock_0_not_i_i_fu_295_p2 = (inBlock_i_i_fu_118 ^ 1'd1);

assign length_fu_201_p3 = ((tmp_i_i_fu_195_p2[0:0] === 1'b1) ? 31'd1 : tmp_1_fu_191_p1);

assign not_i_i_fu_237_p2 = (tmp_9_i_i_fu_231_p2 ^ 1'd1);

assign or_cond_i_i_fu_263_p2 = (tmp_i_i_27_fu_258_p2 | p_inBlock_i_i_fu_243_p2);

assign p_character_num_i_i_fu_249_p3 = ((tmp_9_i_i_fu_231_p2[0:0] === 1'b1) ? 8'd0 : character_num_1_fu_114);

assign p_inBlock_i_i_fu_243_p2 = (not_i_i_fu_237_p2 & inBlock_i_i_fu_118);

assign p_threshold_fu_187_p1 = threshold_v_dout[15:0];

assign rev_fu_289_p2 = (ult_fu_284_p2 ^ 1'd1);

assign tmp1_fu_301_p2 = (rev_fu_289_p2 | inBlock_0_not_i_i_fu_295_p2);

assign tmp_11_i_i_fu_339_p2 = (8'd1 + p_character_num_i_i_fu_249_p3);

assign tmp_1_fu_191_p1 = src_cols_V_dout[30:0];

assign tmp_3_i_i_fu_274_p1 = p_character_num_i_i_fu_249_p3;

assign tmp_4_fu_323_p4 = {{p_character_num_i_i_fu_249_p3[7:3]}};

assign tmp_8_i_i_fu_318_p1 = p_character_num_i_i_fu_249_p3;

assign tmp_9_i_i_fu_231_p2 = ((i_i_i_reg_166 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_i_i_27_fu_258_p2 = ((src_data_stream_V_dout < p_threshold_reg_379) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_195_p2 = (($signed(src_cols_V_dout) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign ult_fu_284_p2 = ((src_data_stream_V_dout < p_threshold_reg_379) ? 1'b1 : 1'b0);

endmodule //find_boundary
