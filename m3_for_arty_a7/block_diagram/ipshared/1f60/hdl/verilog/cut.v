// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_rows_V_dout,
        src_rows_V_empty_n,
        src_rows_V_read,
        src_cols_V_dout,
        src_cols_V_empty_n,
        src_cols_V_read,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        bound_x_min_dout,
        bound_x_min_empty_n,
        bound_x_min_read,
        bound_x_max_dout,
        bound_x_max_empty_n,
        bound_x_max_read,
        bound_y_min_dout,
        bound_y_min_empty_n,
        bound_y_min_read,
        bound_y_max_dout,
        bound_y_max_empty_n,
        bound_y_max_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] src_rows_V_dout;
input   src_rows_V_empty_n;
output   src_rows_V_read;
input  [15:0] src_cols_V_dout;
input   src_cols_V_empty_n;
output   src_cols_V_read;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
input  [15:0] bound_x_min_dout;
input   bound_x_min_empty_n;
output   bound_x_min_read;
input  [15:0] bound_x_max_dout;
input   bound_x_max_empty_n;
output   bound_x_max_read;
input  [15:0] bound_y_min_dout;
input   bound_y_min_empty_n;
output   bound_y_min_read;
input  [15:0] bound_y_max_dout;
input   bound_y_max_empty_n;
output   bound_y_max_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_rows_V_read;
reg src_cols_V_read;
reg src_data_stream_V_read;
reg dst_data_stream_V_write;
reg bound_x_min_read;
reg bound_x_max_read;
reg bound_y_min_read;
reg bound_y_max_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_rows_V_blk_n;
reg    src_cols_V_blk_n;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    dst_data_stream_V_blk_n;
reg   [0:0] or_cond1_i_reg_338;
reg    bound_x_min_blk_n;
reg    bound_x_max_blk_n;
reg    bound_y_min_blk_n;
reg    bound_y_max_blk_n;
reg   [15:0] t_V_1_reg_215;
reg   [15:0] bound_x_min_read_reg_285;
reg    ap_block_state1;
reg   [15:0] bound_x_max_read_reg_290;
reg   [15:0] bound_y_min_read_reg_295;
reg   [15:0] bound_y_max_read_reg_300;
reg   [15:0] src_rows_V_read_reg_305;
reg   [15:0] src_cols_V_read_reg_310;
wire   [0:0] exitcond1_i_fu_226_p2;
wire    ap_CS_fsm_state2;
wire   [15:0] i_V_fu_231_p2;
reg   [15:0] i_V_reg_319;
wire   [0:0] tmp1_fu_247_p2;
reg   [0:0] tmp1_reg_324;
wire   [0:0] exitcond_i_fu_253_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] j_V_fu_258_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] or_cond1_i_fu_280_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [15:0] t_V_reg_204;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_7_i_fu_237_p2;
wire   [0:0] tmp_8_i_fu_242_p2;
wire   [0:0] tmp_11_i_fu_264_p2;
wire   [0:0] tmp_12_i_fu_269_p2;
wire   [0:0] tmp2_fu_274_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_226_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_i_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond1_i_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_215 <= j_V_fu_258_p2;
    end else if (((exitcond1_i_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_215 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_204 <= i_V_reg_319;
    end else if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_204 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_max_read_reg_290 <= bound_x_max_dout;
        bound_x_min_read_reg_285 <= bound_x_min_dout;
        bound_y_max_read_reg_300 <= bound_y_max_dout;
        bound_y_min_read_reg_295 <= bound_y_min_dout;
        src_cols_V_read_reg_310 <= src_cols_V_dout;
        src_rows_V_read_reg_305 <= src_rows_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_319 <= i_V_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond1_i_reg_338 <= or_cond1_i_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp1_reg_324 <= tmp1_fu_247_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_253_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_226_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_226_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_max_blk_n = bound_x_max_empty_n;
    end else begin
        bound_x_max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_max_read = 1'b1;
    end else begin
        bound_x_max_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_min_blk_n = bound_x_min_empty_n;
    end else begin
        bound_x_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_min_read = 1'b1;
    end else begin
        bound_x_min_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_max_blk_n = bound_y_max_empty_n;
    end else begin
        bound_y_max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_max_read = 1'b1;
    end else begin
        bound_y_max_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_min_blk_n = bound_y_min_empty_n;
    end else begin
        bound_y_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_min_read = 1'b1;
    end else begin
        bound_y_min_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond1_i_reg_338 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_cond1_i_reg_338 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_blk_n = src_cols_V_empty_n;
    end else begin
        src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_read = 1'b1;
    end else begin
        src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_rows_V_blk_n = src_rows_V_empty_n;
    end else begin
        src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_rows_V_read = 1'b1;
    end else begin
        src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_226_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_data_stream_V_empty_n == 1'b0) | ((or_cond1_i_reg_338 == 1'd0) & (dst_data_stream_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_data_stream_V_empty_n == 1'b0) | ((or_cond1_i_reg_338 == 1'd0) & (dst_data_stream_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_data_stream_V_empty_n == 1'b0) | ((or_cond1_i_reg_338 == 1'd0) & (dst_data_stream_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (bound_y_max_empty_n == 1'b0) | (bound_y_min_empty_n == 1'b0) | (bound_x_max_empty_n == 1'b0) | (bound_x_min_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((src_data_stream_V_empty_n == 1'b0) | ((or_cond1_i_reg_338 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_data_stream_V_din = src_data_stream_V_dout;

assign exitcond1_i_fu_226_p2 = ((t_V_reg_204 == src_rows_V_read_reg_305) ? 1'b1 : 1'b0);

assign exitcond_i_fu_253_p2 = ((t_V_1_reg_215 == src_cols_V_read_reg_310) ? 1'b1 : 1'b0);

assign i_V_fu_231_p2 = (t_V_reg_204 + 16'd1);

assign j_V_fu_258_p2 = (t_V_1_reg_215 + 16'd1);

assign or_cond1_i_fu_280_p2 = (tmp2_fu_274_p2 | tmp1_reg_324);

assign tmp1_fu_247_p2 = (tmp_8_i_fu_242_p2 | tmp_7_i_fu_237_p2);

assign tmp2_fu_274_p2 = (tmp_12_i_fu_269_p2 | tmp_11_i_fu_264_p2);

assign tmp_11_i_fu_264_p2 = ((t_V_1_reg_215 < bound_x_min_read_reg_285) ? 1'b1 : 1'b0);

assign tmp_12_i_fu_269_p2 = ((t_V_1_reg_215 > bound_x_max_read_reg_290) ? 1'b1 : 1'b0);

assign tmp_7_i_fu_237_p2 = ((t_V_reg_204 < bound_y_min_read_reg_295) ? 1'b1 : 1'b0);

assign tmp_8_i_fu_242_p2 = ((t_V_reg_204 > bound_y_max_read_reg_300) ? 1'b1 : 1'b0);

endmodule //cut
