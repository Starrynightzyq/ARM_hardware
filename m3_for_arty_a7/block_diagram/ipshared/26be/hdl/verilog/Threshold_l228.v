// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Threshold_l228 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows,
        cols,
        img_h_data_stream_0_V_dout,
        img_h_data_stream_0_V_empty_n,
        img_h_data_stream_0_V_read,
        img_h_1_data_stream_0_V_din,
        img_h_1_data_stream_0_V_full_n,
        img_h_1_data_stream_0_V_write,
        max_h,
        min_h
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] rows;
input  [31:0] cols;
input  [7:0] img_h_data_stream_0_V_dout;
input   img_h_data_stream_0_V_empty_n;
output   img_h_data_stream_0_V_read;
output  [7:0] img_h_1_data_stream_0_V_din;
input   img_h_1_data_stream_0_V_full_n;
output   img_h_1_data_stream_0_V_write;
input  [31:0] max_h;
input  [31:0] min_h;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_h_data_stream_0_V_read;
reg img_h_1_data_stream_0_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_h_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_277;
reg    img_h_1_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_i_reg_277_pp0_iter1_reg;
reg   [31:0] t_V_2_reg_172;
reg    ap_block_state1;
wire   [7:0] p_thresh_max_fu_183_p1;
wire   [7:0] p_thresh_min_fu_187_p1;
wire   [0:0] exitcond5_i_fu_191_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_196_p2;
reg   [31:0] i_V_reg_272;
wire   [0:0] exitcond_i_fu_202_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] j_V_fu_207_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] ult_fu_213_p2;
reg   [0:0] ult_reg_286;
wire   [0:0] ult8_fu_218_p2;
reg   [0:0] ult8_reg_291;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [31:0] t_V_reg_161;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] rev7_fu_223_p2;
wire   [0:0] rev9_fu_228_p2;
wire   [0:0] tmp_32_fu_233_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond5_i_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond5_i_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((exitcond5_i_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        t_V_2_reg_172 <= j_V_fu_207_p2;
    end else if (((exitcond5_i_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_2_reg_172 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_reg_161 <= i_V_reg_272;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_161 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_i_reg_277 <= exitcond_i_fu_202_p2;
        exitcond_i_reg_277_pp0_iter1_reg <= exitcond_i_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_272 <= i_V_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_277 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ult8_reg_291 <= ult8_fu_218_p2;
        ult_reg_286 <= ult_fu_213_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_202_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_i_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_i_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_277_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        img_h_1_data_stream_0_V_blk_n = img_h_1_data_stream_0_V_full_n;
    end else begin
        img_h_1_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_277_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        img_h_1_data_stream_0_V_write = 1'b1;
    end else begin
        img_h_1_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_277 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_h_data_stream_0_V_blk_n = img_h_data_stream_0_V_empty_n;
    end else begin
        img_h_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_277 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_h_data_stream_0_V_read = 1'b1;
    end else begin
        img_h_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_i_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_i_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_i_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_i_reg_277_pp0_iter1_reg == 1'd0) & (img_h_1_data_stream_0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_i_reg_277 == 1'd0) & (img_h_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_i_reg_277_pp0_iter1_reg == 1'd0) & (img_h_1_data_stream_0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_i_reg_277 == 1'd0) & (img_h_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_i_reg_277_pp0_iter1_reg == 1'd0) & (img_h_1_data_stream_0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_i_reg_277 == 1'd0) & (img_h_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_i_reg_277 == 1'd0) & (img_h_data_stream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((exitcond_i_reg_277_pp0_iter1_reg == 1'd0) & (img_h_1_data_stream_0_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond5_i_fu_191_p2 = ((t_V_reg_161 == rows) ? 1'b1 : 1'b0);

assign exitcond_i_fu_202_p2 = ((t_V_2_reg_172 == cols) ? 1'b1 : 1'b0);

assign i_V_fu_196_p2 = (t_V_reg_161 + 32'd1);

assign img_h_1_data_stream_0_V_din = ((tmp_32_fu_233_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign j_V_fu_207_p2 = (t_V_2_reg_172 + 32'd1);

assign p_thresh_max_fu_183_p1 = max_h[7:0];

assign p_thresh_min_fu_187_p1 = min_h[7:0];

assign rev7_fu_223_p2 = (ult_reg_286 ^ 1'd1);

assign rev9_fu_228_p2 = (ult8_reg_291 ^ 1'd1);

assign tmp_32_fu_233_p2 = (rev9_fu_228_p2 & rev7_fu_223_p2);

assign ult8_fu_218_p2 = ((img_h_data_stream_0_V_dout < p_thresh_min_fu_187_p1) ? 1'b1 : 1'b0);

assign ult_fu_213_p2 = ((p_thresh_max_fu_183_p1 < img_h_data_stream_0_V_dout) ? 1'b1 : 1'b0);

endmodule //Threshold_l228
