// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module find_boundary_shrink_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_cols_V_dout,
        src_cols_V_empty_n,
        src_cols_V_read,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        threshold_width_dout,
        threshold_width_empty_n,
        threshold_width_read,
        shrink_x_min_dout,
        shrink_x_min_empty_n,
        shrink_x_min_read,
        shrink_x_max_dout,
        shrink_x_max_empty_n,
        shrink_x_max_read,
        range_min_dout,
        range_min_empty_n,
        range_min_read,
        bound_min,
        bound_min_ap_vld,
        bound_max,
        bound_max_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] src_cols_V_dout;
input   src_cols_V_empty_n;
output   src_cols_V_read;
input  [15:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
input  [31:0] threshold_width_dout;
input   threshold_width_empty_n;
output   threshold_width_read;
input  [7:0] shrink_x_min_dout;
input   shrink_x_min_empty_n;
output   shrink_x_min_read;
input  [7:0] shrink_x_max_dout;
input   shrink_x_max_empty_n;
output   shrink_x_max_read;
input  [15:0] range_min_dout;
input   range_min_empty_n;
output   range_min_read;
output  [15:0] bound_min;
output   bound_min_ap_vld;
output  [15:0] bound_max;
output   bound_max_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_cols_V_read;
reg src_data_stream_V_read;
reg threshold_width_read;
reg shrink_x_min_read;
reg shrink_x_max_read;
reg range_min_read;
reg bound_min_ap_vld;
reg bound_max_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_cols_V_blk_n;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_758;
reg    threshold_width_blk_n;
reg    shrink_x_min_blk_n;
reg    shrink_x_max_blk_n;
reg    range_min_blk_n;
reg   [0:0] inBlock_i_i_reg_204;
reg   [15:0] bound_min_r_1_i_i_reg_216;
reg   [15:0] bound_max_r_1_i_i_reg_228;
reg   [15:0] character_num_i_i_reg_240;
reg   [30:0] i_i_i_reg_252;
reg   [7:0] shrink_x_min_read_reg_685;
reg    ap_block_state1;
reg   [7:0] shrink_x_max_read_reg_691;
reg   [15:0] range_min_read_reg_697;
wire   [15:0] p_threshold_fu_263_p1;
reg   [15:0] p_threshold_reg_702;
wire   [30:0] tmp_7_fu_267_p1;
reg   [30:0] tmp_7_reg_707;
wire   [0:0] tmp_i_i_fu_271_p2;
reg   [0:0] tmp_i_i_reg_712;
wire   [30:0] length_fu_277_p3;
reg   [30:0] length_reg_717;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_14_cast_i_i_fu_283_p1;
reg   [16:0] tmp_14_cast_i_i_reg_723;
wire   [30:0] tmp_15_i_i_fu_286_p2;
reg   [30:0] tmp_15_i_i_reg_728;
wire   [16:0] tmp_16_cast_i_i_fu_292_p1;
reg   [16:0] tmp_16_cast_i_i_reg_733;
wire   [16:0] tmp_17_cast_i_i_fu_295_p1;
reg   [16:0] tmp_17_cast_i_i_reg_738;
wire   [15:0] tmp_18_i_i_fu_298_p1;
reg   [15:0] tmp_18_i_i_reg_743;
wire   [15:0] tmp_19_i_i_fu_301_p1;
reg   [15:0] tmp_19_i_i_reg_748;
wire   [15:0] tmp_fu_304_p1;
reg   [15:0] tmp_reg_753;
wire   [0:0] exitcond_fu_308_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_758_pp0_iter1_reg;
reg   [0:0] exitcond_reg_758_pp0_iter2_reg;
wire   [30:0] i_fu_313_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_21_i_i_fu_319_p2;
reg   [0:0] tmp_21_i_i_reg_767;
reg   [0:0] tmp_21_i_i_reg_767_pp0_iter1_reg;
wire   [15:0] bound_min_temp_fu_325_p1;
reg   [15:0] bound_min_temp_reg_777;
reg   [15:0] bound_min_temp_reg_777_pp0_iter1_reg;
wire   [0:0] tmp_29_i_i_fu_329_p2;
reg   [0:0] tmp_29_i_i_reg_784;
reg   [0:0] tmp_29_i_i_reg_784_pp0_iter1_reg;
reg   [0:0] tmp_29_i_i_reg_784_pp0_iter2_reg;
wire   [0:0] tmp_22_i_i_fu_334_p2;
reg   [0:0] tmp_22_i_i_reg_788;
wire   [0:0] inBlock_3_i_i_fu_484_p2;
reg   [0:0] inBlock_3_i_i_reg_796;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] bound_min_r_1_5_i_i_fu_514_p3;
reg   [15:0] bound_min_r_1_5_i_i_reg_801;
wire   [15:0] bound_max_r_1_4_i_i_fu_545_p3;
reg   [15:0] bound_max_r_1_4_i_i_reg_808;
wire   [15:0] character_num_4_i_i_fu_608_p3;
reg   [15:0] character_num_4_i_i_reg_815;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] ap_phi_mux_inBlock_i_i_phi_fu_208_p4;
reg   [15:0] ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4;
reg   [15:0] ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4;
reg   [15:0] ap_phi_mux_character_num_i_i_phi_fu_244_p4;
reg   [15:0] bound_min_temp_i_i_fu_150;
wire   [15:0] bound_min_temp_2_i_i_fu_576_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] not_i_i_fu_342_p2;
wire   [0:0] p_inBlock_i_i_fu_347_p2;
wire   [15:0] bound_min_r_1_fu_367_p3;
wire   [16:0] tmp_24_cast_i_i_fu_386_p1;
wire   [16:0] tmp_25_cast_i_i_fu_389_p1;
wire   [16:0] tmp_26_i_i_fu_393_p2;
wire   [15:0] p_character_num_i_i_fu_374_p3;
wire   [0:0] tmp_28_i_i_fu_404_p2;
wire   [15:0] p_bound_min_r_1_i_i_fu_353_p3;
wire   [0:0] or_cond_i_i_fu_381_p2;
wire   [0:0] sel_tmp3_fu_430_p2;
wire   [0:0] sel_tmp_fu_424_p2;
wire   [0:0] inBlock_i_i_not_fu_443_p2;
wire   [0:0] sel_tmp6_fu_449_p2;
wire   [0:0] sel_tmp7_fu_454_p2;
wire   [0:0] sel_tmp4_fu_435_p3;
wire   [0:0] tmp_27_i_i_fu_399_p2;
wire   [0:0] tmp9_fu_467_p2;
wire   [0:0] sel_tmp1_fu_473_p2;
wire   [0:0] sel_tmp8_fu_459_p3;
wire   [0:0] not_sel_tmp_fu_478_p2;
wire   [15:0] p_bound_min_temp_0_b_fu_410_p3;
wire   [15:0] sel_tmp2_fu_490_p3;
wire   [15:0] sel_tmp5_fu_498_p3;
wire   [15:0] sel_tmp9_fu_506_p3;
wire   [15:0] p_bound_max_r_1_i_i_fu_360_p3;
wire   [15:0] sel_tmp10_fu_522_p3;
wire   [15:0] sel_tmp11_fu_529_p3;
wire   [15:0] sel_tmp12_fu_537_p3;
wire   [15:0] sel_tmp13_fu_553_p3;
wire   [15:0] sel_tmp14_fu_560_p3;
wire   [15:0] sel_tmp15_fu_568_p3;
wire   [15:0] character_num_fu_418_p2;
wire   [15:0] sel_tmp16_fu_584_p3;
wire   [15:0] sel_tmp17_fu_592_p3;
wire   [15:0] sel_tmp18_fu_600_p3;
wire   [16:0] tmp_30_cast_i_i_fu_621_p1;
wire   [16:0] tmp_31_i_i_fu_624_p2;
wire   [30:0] tmp_31_cast_i_i_cast_fu_629_p1;
wire   [0:0] tmp_i_i_40_fu_633_p2;
wire   [15:0] tmp_32_i_i_fu_638_p2;
wire   [16:0] tmp_36_cast_i_i_fu_650_p1;
wire   [16:0] tmp_37_i_i_fu_653_p2;
wire   [0:0] tmp_10_fu_658_p3;
wire   [15:0] tmp_39_i_i_fu_666_p2;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_758_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_max_r_1_i_i_reg_228 <= bound_max_r_1_4_i_i_reg_808;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_max_r_1_i_i_reg_228 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_758_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_min_r_1_i_i_reg_216 <= bound_min_r_1_5_i_i_reg_801;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_min_r_1_i_i_reg_216 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_758_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        character_num_i_i_reg_240 <= character_num_4_i_i_reg_815;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        character_num_i_i_reg_240 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_i_i_reg_252 <= i_fu_313_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_i_i_reg_252 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_758_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inBlock_i_i_reg_204 <= inBlock_3_i_i_reg_796;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inBlock_i_i_reg_204 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_758_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_max_r_1_4_i_i_reg_808 <= bound_max_r_1_4_i_i_fu_545_p3;
        bound_min_r_1_5_i_i_reg_801 <= bound_min_r_1_5_i_i_fu_514_p3;
        bound_min_temp_i_i_fu_150 <= bound_min_temp_2_i_i_fu_576_p3;
        character_num_4_i_i_reg_815 <= character_num_4_i_i_fu_608_p3;
        inBlock_3_i_i_reg_796 <= inBlock_3_i_i_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_min_temp_reg_777 <= bound_min_temp_fu_325_p1;
        tmp_21_i_i_reg_767 <= tmp_21_i_i_fu_319_p2;
        tmp_29_i_i_reg_784 <= tmp_29_i_i_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_min_temp_reg_777_pp0_iter1_reg <= bound_min_temp_reg_777;
        exitcond_reg_758 <= exitcond_fu_308_p2;
        exitcond_reg_758_pp0_iter1_reg <= exitcond_reg_758;
        tmp_21_i_i_reg_767_pp0_iter1_reg <= tmp_21_i_i_reg_767;
        tmp_29_i_i_reg_784_pp0_iter1_reg <= tmp_29_i_i_reg_784;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_reg_758_pp0_iter2_reg <= exitcond_reg_758_pp0_iter1_reg;
        tmp_29_i_i_reg_784_pp0_iter2_reg <= tmp_29_i_i_reg_784_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        length_reg_717 <= length_fu_277_p3;
        tmp_14_cast_i_i_reg_723[15 : 0] <= tmp_14_cast_i_i_fu_283_p1[15 : 0];
        tmp_15_i_i_reg_728 <= tmp_15_i_i_fu_286_p2;
        tmp_16_cast_i_i_reg_733[7 : 0] <= tmp_16_cast_i_i_fu_292_p1[7 : 0];
        tmp_17_cast_i_i_reg_738[7 : 0] <= tmp_17_cast_i_i_fu_295_p1[7 : 0];
        tmp_18_i_i_reg_743[7 : 0] <= tmp_18_i_i_fu_298_p1[7 : 0];
        tmp_19_i_i_reg_748[7 : 0] <= tmp_19_i_i_fu_301_p1[7 : 0];
        tmp_reg_753 <= tmp_fu_304_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_x_max_empty_n == 1'b0) | (shrink_x_min_empty_n == 1'b0) | (threshold_width_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_threshold_reg_702 <= p_threshold_fu_263_p1;
        range_min_read_reg_697 <= range_min_dout;
        shrink_x_max_read_reg_691 <= shrink_x_max_dout;
        shrink_x_min_read_reg_685 <= shrink_x_min_dout;
        tmp_7_reg_707 <= tmp_7_fu_267_p1;
        tmp_i_i_reg_712 <= tmp_i_i_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_758 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_22_i_i_reg_788 <= tmp_22_i_i_fu_334_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_308_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_758_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4 = bound_max_r_1_4_i_i_reg_808;
    end else begin
        ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4 = bound_max_r_1_i_i_reg_228;
    end
end

always @ (*) begin
    if (((exitcond_reg_758_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4 = bound_min_r_1_5_i_i_reg_801;
    end else begin
        ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4 = bound_min_r_1_i_i_reg_216;
    end
end

always @ (*) begin
    if (((exitcond_reg_758_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_character_num_i_i_phi_fu_244_p4 = character_num_4_i_i_reg_815;
    end else begin
        ap_phi_mux_character_num_i_i_phi_fu_244_p4 = character_num_i_i_reg_240;
    end
end

always @ (*) begin
    if (((exitcond_reg_758_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_inBlock_i_i_phi_fu_208_p4 = inBlock_3_i_i_reg_796;
    end else begin
        ap_phi_mux_inBlock_i_i_phi_fu_208_p4 = inBlock_i_i_reg_204;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_29_i_i_reg_784_pp0_iter2_reg == 1'd1))) begin
        bound_max_ap_vld = 1'b1;
    end else begin
        bound_max_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_29_i_i_reg_784_pp0_iter2_reg == 1'd1))) begin
        bound_min_ap_vld = 1'b1;
    end else begin
        bound_min_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        range_min_blk_n = range_min_empty_n;
    end else begin
        range_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_x_max_empty_n == 1'b0) | (shrink_x_min_empty_n == 1'b0) | (threshold_width_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        range_min_read = 1'b1;
    end else begin
        range_min_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shrink_x_max_blk_n = shrink_x_max_empty_n;
    end else begin
        shrink_x_max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_x_max_empty_n == 1'b0) | (shrink_x_min_empty_n == 1'b0) | (threshold_width_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shrink_x_max_read = 1'b1;
    end else begin
        shrink_x_max_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shrink_x_min_blk_n = shrink_x_min_empty_n;
    end else begin
        shrink_x_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_x_max_empty_n == 1'b0) | (shrink_x_min_empty_n == 1'b0) | (threshold_width_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shrink_x_min_read = 1'b1;
    end else begin
        shrink_x_min_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_blk_n = src_cols_V_empty_n;
    end else begin
        src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_x_max_empty_n == 1'b0) | (shrink_x_min_empty_n == 1'b0) | (threshold_width_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_read = 1'b1;
    end else begin
        src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_758 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_width_blk_n = threshold_width_empty_n;
    end else begin
        threshold_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_x_max_empty_n == 1'b0) | (shrink_x_min_empty_n == 1'b0) | (threshold_width_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_width_read = 1'b1;
    end else begin
        threshold_width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_x_max_empty_n == 1'b0) | (shrink_x_min_empty_n == 1'b0) | (threshold_width_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_308_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_308_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_758 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_758 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_758 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_x_max_empty_n == 1'b0) | (shrink_x_min_empty_n == 1'b0) | (threshold_width_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_reg_758 == 1'd0) & (src_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_max = ((tmp_10_fu_658_p3[0:0] === 1'b1) ? 16'd0 : tmp_39_i_i_fu_666_p2);

assign bound_max_r_1_4_i_i_fu_545_p3 = ((sel_tmp1_fu_473_p2[0:0] === 1'b1) ? p_bound_max_r_1_i_i_fu_360_p3 : sel_tmp12_fu_537_p3);

assign bound_min = ((tmp_i_i_40_fu_633_p2[0:0] === 1'b1) ? tmp_reg_753 : tmp_32_i_i_fu_638_p2);

assign bound_min_r_1_5_i_i_fu_514_p3 = ((sel_tmp1_fu_473_p2[0:0] === 1'b1) ? p_bound_min_r_1_i_i_fu_353_p3 : sel_tmp9_fu_506_p3);

assign bound_min_r_1_fu_367_p3 = ((tmp_21_i_i_reg_767_pp0_iter1_reg[0:0] === 1'b1) ? 16'd0 : bound_min_temp_i_i_fu_150);

assign bound_min_temp_2_i_i_fu_576_p3 = ((sel_tmp1_fu_473_p2[0:0] === 1'b1) ? bound_min_r_1_fu_367_p3 : sel_tmp15_fu_568_p3);

assign bound_min_temp_fu_325_p1 = i_i_i_reg_252[15:0];

assign character_num_4_i_i_fu_608_p3 = ((sel_tmp1_fu_473_p2[0:0] === 1'b1) ? p_character_num_i_i_fu_374_p3 : sel_tmp18_fu_600_p3);

assign character_num_fu_418_p2 = (16'd1 + p_character_num_i_i_fu_374_p3);

assign exitcond_fu_308_p2 = ((i_i_i_reg_252 == length_reg_717) ? 1'b1 : 1'b0);

assign i_fu_313_p2 = (i_i_i_reg_252 + 31'd1);

assign inBlock_3_i_i_fu_484_p2 = (sel_tmp8_fu_459_p3 & not_sel_tmp_fu_478_p2);

assign inBlock_i_i_not_fu_443_p2 = (ap_phi_mux_inBlock_i_i_phi_fu_208_p4 ^ 1'd1);

assign length_fu_277_p3 = ((tmp_i_i_reg_712[0:0] === 1'b1) ? 31'd1 : tmp_7_reg_707);

assign not_i_i_fu_342_p2 = (tmp_21_i_i_reg_767_pp0_iter1_reg ^ 1'd1);

assign not_sel_tmp_fu_478_p2 = (sel_tmp1_fu_473_p2 ^ 1'd1);

assign or_cond_i_i_fu_381_p2 = (tmp_22_i_i_reg_788 | p_inBlock_i_i_fu_347_p2);

assign p_bound_max_r_1_i_i_fu_360_p3 = ((tmp_21_i_i_reg_767_pp0_iter1_reg[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_bound_max_r_1_i_i_phi_fu_232_p4);

assign p_bound_min_r_1_i_i_fu_353_p3 = ((tmp_21_i_i_reg_767_pp0_iter1_reg[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_bound_min_r_1_i_i_phi_fu_220_p4);

assign p_bound_min_temp_0_b_fu_410_p3 = ((tmp_28_i_i_fu_404_p2[0:0] === 1'b1) ? bound_min_r_1_fu_367_p3 : p_bound_min_r_1_i_i_fu_353_p3);

assign p_character_num_i_i_fu_374_p3 = ((tmp_21_i_i_reg_767_pp0_iter1_reg[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_character_num_i_i_phi_fu_244_p4);

assign p_inBlock_i_i_fu_347_p2 = (not_i_i_fu_342_p2 & ap_phi_mux_inBlock_i_i_phi_fu_208_p4);

assign p_threshold_fu_263_p1 = threshold_width_dout[15:0];

assign sel_tmp10_fu_522_p3 = ((or_cond_i_i_fu_381_p2[0:0] === 1'b1) ? bound_min_temp_reg_777_pp0_iter1_reg : p_bound_max_r_1_i_i_fu_360_p3);

assign sel_tmp11_fu_529_p3 = ((sel_tmp3_fu_430_p2[0:0] === 1'b1) ? p_bound_max_r_1_i_i_fu_360_p3 : sel_tmp10_fu_522_p3);

assign sel_tmp12_fu_537_p3 = ((sel_tmp7_fu_454_p2[0:0] === 1'b1) ? p_bound_max_r_1_i_i_fu_360_p3 : sel_tmp11_fu_529_p3);

assign sel_tmp13_fu_553_p3 = ((or_cond_i_i_fu_381_p2[0:0] === 1'b1) ? bound_min_r_1_fu_367_p3 : bound_min_temp_reg_777_pp0_iter1_reg);

assign sel_tmp14_fu_560_p3 = ((sel_tmp3_fu_430_p2[0:0] === 1'b1) ? bound_min_r_1_fu_367_p3 : sel_tmp13_fu_553_p3);

assign sel_tmp15_fu_568_p3 = ((sel_tmp7_fu_454_p2[0:0] === 1'b1) ? bound_min_r_1_fu_367_p3 : sel_tmp14_fu_560_p3);

assign sel_tmp16_fu_584_p3 = ((or_cond_i_i_fu_381_p2[0:0] === 1'b1) ? character_num_fu_418_p2 : p_character_num_i_i_fu_374_p3);

assign sel_tmp17_fu_592_p3 = ((sel_tmp3_fu_430_p2[0:0] === 1'b1) ? p_character_num_i_i_fu_374_p3 : sel_tmp16_fu_584_p3);

assign sel_tmp18_fu_600_p3 = ((sel_tmp7_fu_454_p2[0:0] === 1'b1) ? p_character_num_i_i_fu_374_p3 : sel_tmp17_fu_592_p3);

assign sel_tmp1_fu_473_p2 = (tmp_22_i_i_reg_788 & tmp9_fu_467_p2);

assign sel_tmp2_fu_490_p3 = ((or_cond_i_i_fu_381_p2[0:0] === 1'b1) ? p_bound_min_temp_0_b_fu_410_p3 : p_bound_min_r_1_i_i_fu_353_p3);

assign sel_tmp3_fu_430_p2 = (tmp_22_i_i_reg_788 ^ or_cond_i_i_fu_381_p2);

assign sel_tmp4_fu_435_p3 = ((sel_tmp3_fu_430_p2[0:0] === 1'b1) ? p_inBlock_i_i_fu_347_p2 : sel_tmp_fu_424_p2);

assign sel_tmp5_fu_498_p3 = ((sel_tmp3_fu_430_p2[0:0] === 1'b1) ? p_bound_min_r_1_i_i_fu_353_p3 : sel_tmp2_fu_490_p3);

assign sel_tmp6_fu_449_p2 = (tmp_21_i_i_reg_767_pp0_iter1_reg | inBlock_i_i_not_fu_443_p2);

assign sel_tmp7_fu_454_p2 = (tmp_22_i_i_reg_788 & sel_tmp6_fu_449_p2);

assign sel_tmp8_fu_459_p3 = ((sel_tmp7_fu_454_p2[0:0] === 1'b1) ? p_inBlock_i_i_fu_347_p2 : sel_tmp4_fu_435_p3);

assign sel_tmp9_fu_506_p3 = ((sel_tmp7_fu_454_p2[0:0] === 1'b1) ? p_bound_min_r_1_i_i_fu_353_p3 : sel_tmp5_fu_498_p3);

assign sel_tmp_fu_424_p2 = (or_cond_i_i_fu_381_p2 ^ 1'd1);

assign tmp9_fu_467_p2 = (tmp_27_i_i_fu_399_p2 & p_inBlock_i_i_fu_347_p2);

assign tmp_10_fu_658_p3 = tmp_37_i_i_fu_653_p2[32'd16];

assign tmp_14_cast_i_i_fu_283_p1 = range_min_read_reg_697;

assign tmp_15_i_i_fu_286_p2 = ($signed(31'd2147483647) + $signed(length_fu_277_p3));

assign tmp_16_cast_i_i_fu_292_p1 = shrink_x_min_read_reg_685;

assign tmp_17_cast_i_i_fu_295_p1 = shrink_x_max_read_reg_691;

assign tmp_18_i_i_fu_298_p1 = shrink_x_max_read_reg_691;

assign tmp_19_i_i_fu_301_p1 = shrink_x_min_read_reg_685;

assign tmp_21_i_i_fu_319_p2 = ((i_i_i_reg_252 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_22_i_i_fu_334_p2 = ((src_data_stream_V_dout < p_threshold_reg_702) ? 1'b1 : 1'b0);

assign tmp_24_cast_i_i_fu_386_p1 = bound_min_temp_reg_777_pp0_iter1_reg;

assign tmp_25_cast_i_i_fu_389_p1 = bound_min_r_1_fu_367_p3;

assign tmp_26_i_i_fu_393_p2 = (tmp_24_cast_i_i_fu_386_p1 - tmp_25_cast_i_i_fu_389_p1);

assign tmp_27_i_i_fu_399_p2 = (($signed(tmp_26_i_i_fu_393_p2) < $signed(tmp_14_cast_i_i_reg_723)) ? 1'b1 : 1'b0);

assign tmp_28_i_i_fu_404_p2 = ((p_character_num_i_i_fu_374_p3 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_29_i_i_fu_329_p2 = ((i_i_i_reg_252 == tmp_15_i_i_reg_728) ? 1'b1 : 1'b0);

assign tmp_30_cast_i_i_fu_621_p1 = bound_min_r_1_5_i_i_reg_801;

assign tmp_31_cast_i_i_cast_fu_629_p1 = tmp_31_i_i_fu_624_p2;

assign tmp_31_i_i_fu_624_p2 = (tmp_30_cast_i_i_fu_621_p1 + tmp_16_cast_i_i_reg_733);

assign tmp_32_i_i_fu_638_p2 = (bound_min_r_1_5_i_i_reg_801 + tmp_19_i_i_reg_748);

assign tmp_36_cast_i_i_fu_650_p1 = bound_max_r_1_4_i_i_reg_808;

assign tmp_37_i_i_fu_653_p2 = (tmp_36_cast_i_i_fu_650_p1 - tmp_17_cast_i_i_reg_738);

assign tmp_39_i_i_fu_666_p2 = (bound_max_r_1_4_i_i_reg_808 - tmp_18_i_i_reg_743);

assign tmp_7_fu_267_p1 = src_cols_V_dout[30:0];

assign tmp_fu_304_p1 = length_fu_277_p3[15:0];

assign tmp_i_i_40_fu_633_p2 = ((tmp_31_cast_i_i_cast_fu_629_p1 > length_reg_717) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_271_p2 = (($signed(src_cols_V_dout) < $signed(32'd1)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_14_cast_i_i_reg_723[16] <= 1'b0;
    tmp_16_cast_i_i_reg_733[16:8] <= 9'b000000000;
    tmp_17_cast_i_i_reg_738[16:8] <= 9'b000000000;
    tmp_18_i_i_reg_743[15:8] <= 8'b00000000;
    tmp_19_i_i_reg_748[15:8] <= 8'b00000000;
end

endmodule //find_boundary_shrink_1
