// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module find_boundary_shrink (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Hdist_rows_V_dout,
        Hdist_rows_V_empty_n,
        Hdist_rows_V_read,
        Hdist_data_stream_0_V_dout,
        Hdist_data_stream_0_V_empty_n,
        Hdist_data_stream_0_V_read,
        threshold_height_dout,
        threshold_height_empty_n,
        threshold_height_read,
        shrink_y_min_dout,
        shrink_y_min_empty_n,
        shrink_y_min_read,
        shrink_y_max_dout,
        shrink_y_max_empty_n,
        shrink_y_max_read,
        range_min_dout,
        range_min_empty_n,
        range_min_read,
        bound_y_min,
        bound_y_min_ap_vld,
        bound_y_max,
        bound_y_max_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Hdist_rows_V_dout;
input   Hdist_rows_V_empty_n;
output   Hdist_rows_V_read;
input  [15:0] Hdist_data_stream_0_V_dout;
input   Hdist_data_stream_0_V_empty_n;
output   Hdist_data_stream_0_V_read;
input  [31:0] threshold_height_dout;
input   threshold_height_empty_n;
output   threshold_height_read;
input  [7:0] shrink_y_min_dout;
input   shrink_y_min_empty_n;
output   shrink_y_min_read;
input  [7:0] shrink_y_max_dout;
input   shrink_y_max_empty_n;
output   shrink_y_max_read;
input  [15:0] range_min_dout;
input   range_min_empty_n;
output   range_min_read;
output  [15:0] bound_y_min;
output   bound_y_min_ap_vld;
output  [15:0] bound_y_max;
output   bound_y_max_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Hdist_rows_V_read;
reg Hdist_data_stream_0_V_read;
reg threshold_height_read;
reg shrink_y_min_read;
reg shrink_y_max_read;
reg range_min_read;
reg bound_y_min_ap_vld;
reg bound_y_max_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Hdist_rows_V_blk_n;
reg    Hdist_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_772;
reg    threshold_height_blk_n;
reg    shrink_y_min_blk_n;
reg    shrink_y_max_blk_n;
reg    range_min_blk_n;
reg   [0:0] inBlock_i_i_reg_208;
reg   [15:0] bound_min_r_1_i_i_reg_220;
reg   [15:0] bound_max_r_1_i_i_reg_232;
reg   [15:0] character_num_i_i_reg_244;
reg   [30:0] i_i_i_reg_256;
reg   [7:0] shrink_y_min_read_reg_699;
reg    ap_block_state1;
reg   [7:0] shrink_y_max_read_reg_705;
reg   [15:0] range_min_read_reg_711;
wire   [15:0] p_threshold_fu_267_p1;
reg   [15:0] p_threshold_reg_716;
wire   [30:0] tmp_11_fu_271_p1;
reg   [30:0] tmp_11_reg_721;
wire   [0:0] icmp_fu_285_p2;
reg   [0:0] icmp_reg_726;
wire   [30:0] length_fu_291_p3;
reg   [30:0] length_reg_731;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_cast_i_i_fu_297_p1;
reg   [16:0] tmp_cast_i_i_reg_737;
wire   [30:0] tmp_5_i_i_fu_300_p2;
reg   [30:0] tmp_5_i_i_reg_742;
wire   [16:0] tmp_6_cast_i_i_fu_306_p1;
reg   [16:0] tmp_6_cast_i_i_reg_747;
wire   [16:0] tmp_7_cast_i_i_fu_309_p1;
reg   [16:0] tmp_7_cast_i_i_reg_752;
wire   [15:0] tmp_8_i_i_fu_312_p1;
reg   [15:0] tmp_8_i_i_reg_757;
wire   [15:0] tmp_9_i_i_fu_315_p1;
reg   [15:0] tmp_9_i_i_reg_762;
wire   [15:0] tmp_fu_318_p1;
reg   [15:0] tmp_reg_767;
wire   [0:0] exitcond_fu_322_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_772_pp0_iter1_reg;
reg   [0:0] exitcond_reg_772_pp0_iter2_reg;
wire   [30:0] i_fu_327_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_13_i_i_fu_333_p2;
reg   [0:0] tmp_13_i_i_reg_781;
reg   [0:0] tmp_13_i_i_reg_781_pp0_iter1_reg;
wire   [15:0] bound_min_temp_fu_339_p1;
reg   [15:0] bound_min_temp_reg_791;
reg   [15:0] bound_min_temp_reg_791_pp0_iter1_reg;
wire   [0:0] tmp_20_i_i_fu_343_p2;
reg   [0:0] tmp_20_i_i_reg_798;
reg   [0:0] tmp_20_i_i_reg_798_pp0_iter1_reg;
reg   [0:0] tmp_20_i_i_reg_798_pp0_iter2_reg;
wire   [0:0] tmp_14_i_i_fu_348_p2;
reg   [0:0] tmp_14_i_i_reg_802;
wire   [0:0] inBlock_3_i_i_fu_498_p2;
reg   [0:0] inBlock_3_i_i_reg_810;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] bound_min_r_1_5_i_i_fu_528_p3;
reg   [15:0] bound_min_r_1_5_i_i_reg_815;
wire   [15:0] bound_max_r_1_4_i_i_fu_559_p3;
reg   [15:0] bound_max_r_1_4_i_i_reg_822;
wire   [15:0] character_num_4_i_i_fu_622_p3;
reg   [15:0] character_num_4_i_i_reg_829;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] ap_phi_mux_inBlock_i_i_phi_fu_212_p4;
reg   [15:0] ap_phi_mux_bound_min_r_1_i_i_phi_fu_224_p4;
reg   [15:0] ap_phi_mux_bound_max_r_1_i_i_phi_fu_236_p4;
reg   [15:0] ap_phi_mux_character_num_i_i_phi_fu_248_p4;
reg   [15:0] bound_min_temp_i_i_fu_154;
wire   [15:0] bound_min_temp_2_i_i_fu_590_p3;
reg    ap_block_pp0_stage0_01001;
wire   [30:0] tmp_12_fu_275_p4;
wire   [0:0] not_i_i_fu_356_p2;
wire   [0:0] p_inBlock_i_i_fu_361_p2;
wire   [15:0] bound_min_r_1_fu_381_p3;
wire   [16:0] tmp_15_cast_i_i_fu_400_p1;
wire   [16:0] tmp_16_cast_i_i_fu_403_p1;
wire   [16:0] tmp_17_i_i_fu_407_p2;
wire   [15:0] p_character_num_i_i_fu_388_p3;
wire   [0:0] tmp_19_i_i_fu_418_p2;
wire   [15:0] p_bound_min_r_1_i_i_fu_367_p3;
wire   [0:0] or_cond_i_i_fu_395_p2;
wire   [0:0] sel_tmp3_fu_444_p2;
wire   [0:0] sel_tmp_fu_438_p2;
wire   [0:0] inBlock_i_i_not_fu_457_p2;
wire   [0:0] sel_tmp6_fu_463_p2;
wire   [0:0] sel_tmp7_fu_468_p2;
wire   [0:0] sel_tmp4_fu_449_p3;
wire   [0:0] tmp_18_i_i_fu_413_p2;
wire   [0:0] tmp6_fu_481_p2;
wire   [0:0] sel_tmp1_fu_487_p2;
wire   [0:0] sel_tmp8_fu_473_p3;
wire   [0:0] not_sel_tmp_fu_492_p2;
wire   [15:0] p_bound_min_temp_0_b_fu_424_p3;
wire   [15:0] sel_tmp2_fu_504_p3;
wire   [15:0] sel_tmp5_fu_512_p3;
wire   [15:0] sel_tmp9_fu_520_p3;
wire   [15:0] p_bound_max_r_1_i_i_fu_374_p3;
wire   [15:0] sel_tmp10_fu_536_p3;
wire   [15:0] sel_tmp11_fu_543_p3;
wire   [15:0] sel_tmp12_fu_551_p3;
wire   [15:0] sel_tmp13_fu_567_p3;
wire   [15:0] sel_tmp14_fu_574_p3;
wire   [15:0] sel_tmp15_fu_582_p3;
wire   [15:0] character_num_fu_432_p2;
wire   [15:0] sel_tmp16_fu_598_p3;
wire   [15:0] sel_tmp17_fu_606_p3;
wire   [15:0] sel_tmp18_fu_614_p3;
wire   [16:0] tmp_21_cast_i_i_fu_635_p1;
wire   [16:0] tmp_22_i_i_fu_638_p2;
wire   [30:0] tmp_22_cast_i_i_cast_fu_643_p1;
wire   [0:0] tmp_23_i_i_fu_647_p2;
wire   [15:0] tmp_24_i_i_fu_652_p2;
wire   [16:0] tmp_28_cast_i_i_fu_664_p1;
wire   [16:0] tmp_29_i_i_fu_667_p2;
wire   [0:0] tmp_15_fu_672_p3;
wire   [15:0] tmp_31_i_i_fu_680_p2;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_772_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_max_r_1_i_i_reg_232 <= bound_max_r_1_4_i_i_reg_822;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_max_r_1_i_i_reg_232 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_772_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_min_r_1_i_i_reg_220 <= bound_min_r_1_5_i_i_reg_815;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_min_r_1_i_i_reg_220 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_772_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        character_num_i_i_reg_244 <= character_num_4_i_i_reg_829;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        character_num_i_i_reg_244 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_i_i_reg_256 <= i_fu_327_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_i_i_reg_256 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_772_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inBlock_i_i_reg_208 <= inBlock_3_i_i_reg_810;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inBlock_i_i_reg_208 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_772_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_max_r_1_4_i_i_reg_822 <= bound_max_r_1_4_i_i_fu_559_p3;
        bound_min_r_1_5_i_i_reg_815 <= bound_min_r_1_5_i_i_fu_528_p3;
        bound_min_temp_i_i_fu_154 <= bound_min_temp_2_i_i_fu_590_p3;
        character_num_4_i_i_reg_829 <= character_num_4_i_i_fu_622_p3;
        inBlock_3_i_i_reg_810 <= inBlock_3_i_i_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_min_temp_reg_791 <= bound_min_temp_fu_339_p1;
        tmp_13_i_i_reg_781 <= tmp_13_i_i_fu_333_p2;
        tmp_20_i_i_reg_798 <= tmp_20_i_i_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bound_min_temp_reg_791_pp0_iter1_reg <= bound_min_temp_reg_791;
        exitcond_reg_772 <= exitcond_fu_322_p2;
        exitcond_reg_772_pp0_iter1_reg <= exitcond_reg_772;
        tmp_13_i_i_reg_781_pp0_iter1_reg <= tmp_13_i_i_reg_781;
        tmp_20_i_i_reg_798_pp0_iter1_reg <= tmp_20_i_i_reg_798;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_reg_772_pp0_iter2_reg <= exitcond_reg_772_pp0_iter1_reg;
        tmp_20_i_i_reg_798_pp0_iter2_reg <= tmp_20_i_i_reg_798_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_y_max_empty_n == 1'b0) | (shrink_y_min_empty_n == 1'b0) | (threshold_height_empty_n == 1'b0) | (1'b0 == Hdist_rows_V_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_reg_726 <= icmp_fu_285_p2;
        p_threshold_reg_716 <= p_threshold_fu_267_p1;
        range_min_read_reg_711 <= range_min_dout;
        shrink_y_max_read_reg_705 <= shrink_y_max_dout;
        shrink_y_min_read_reg_699 <= shrink_y_min_dout;
        tmp_11_reg_721 <= tmp_11_fu_271_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        length_reg_731 <= length_fu_291_p3;
        tmp_5_i_i_reg_742 <= tmp_5_i_i_fu_300_p2;
        tmp_6_cast_i_i_reg_747[7 : 0] <= tmp_6_cast_i_i_fu_306_p1[7 : 0];
        tmp_7_cast_i_i_reg_752[7 : 0] <= tmp_7_cast_i_i_fu_309_p1[7 : 0];
        tmp_8_i_i_reg_757[7 : 0] <= tmp_8_i_i_fu_312_p1[7 : 0];
        tmp_9_i_i_reg_762[7 : 0] <= tmp_9_i_i_fu_315_p1[7 : 0];
        tmp_cast_i_i_reg_737[15 : 0] <= tmp_cast_i_i_fu_297_p1[15 : 0];
        tmp_reg_767 <= tmp_fu_318_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_772 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_14_i_i_reg_802 <= tmp_14_i_i_fu_348_p2;
    end
end

always @ (*) begin
    if (((exitcond_reg_772 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Hdist_data_stream_0_V_blk_n = Hdist_data_stream_0_V_empty_n;
    end else begin
        Hdist_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_772 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Hdist_data_stream_0_V_read = 1'b1;
    end else begin
        Hdist_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Hdist_rows_V_blk_n = Hdist_rows_V_empty_n;
    end else begin
        Hdist_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_y_max_empty_n == 1'b0) | (shrink_y_min_empty_n == 1'b0) | (threshold_height_empty_n == 1'b0) | (1'b0 == Hdist_rows_V_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Hdist_rows_V_read = 1'b1;
    end else begin
        Hdist_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_322_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_772_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_bound_max_r_1_i_i_phi_fu_236_p4 = bound_max_r_1_4_i_i_reg_822;
    end else begin
        ap_phi_mux_bound_max_r_1_i_i_phi_fu_236_p4 = bound_max_r_1_i_i_reg_232;
    end
end

always @ (*) begin
    if (((exitcond_reg_772_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_bound_min_r_1_i_i_phi_fu_224_p4 = bound_min_r_1_5_i_i_reg_815;
    end else begin
        ap_phi_mux_bound_min_r_1_i_i_phi_fu_224_p4 = bound_min_r_1_i_i_reg_220;
    end
end

always @ (*) begin
    if (((exitcond_reg_772_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_character_num_i_i_phi_fu_248_p4 = character_num_4_i_i_reg_829;
    end else begin
        ap_phi_mux_character_num_i_i_phi_fu_248_p4 = character_num_i_i_reg_244;
    end
end

always @ (*) begin
    if (((exitcond_reg_772_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_inBlock_i_i_phi_fu_212_p4 = inBlock_3_i_i_reg_810;
    end else begin
        ap_phi_mux_inBlock_i_i_phi_fu_212_p4 = inBlock_i_i_reg_208;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_20_i_i_reg_798_pp0_iter2_reg == 1'd1))) begin
        bound_y_max_ap_vld = 1'b1;
    end else begin
        bound_y_max_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_20_i_i_reg_798_pp0_iter2_reg == 1'd1))) begin
        bound_y_min_ap_vld = 1'b1;
    end else begin
        bound_y_min_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        range_min_blk_n = range_min_empty_n;
    end else begin
        range_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_y_max_empty_n == 1'b0) | (shrink_y_min_empty_n == 1'b0) | (threshold_height_empty_n == 1'b0) | (1'b0 == Hdist_rows_V_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        range_min_read = 1'b1;
    end else begin
        range_min_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shrink_y_max_blk_n = shrink_y_max_empty_n;
    end else begin
        shrink_y_max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_y_max_empty_n == 1'b0) | (shrink_y_min_empty_n == 1'b0) | (threshold_height_empty_n == 1'b0) | (1'b0 == Hdist_rows_V_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shrink_y_max_read = 1'b1;
    end else begin
        shrink_y_max_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shrink_y_min_blk_n = shrink_y_min_empty_n;
    end else begin
        shrink_y_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_y_max_empty_n == 1'b0) | (shrink_y_min_empty_n == 1'b0) | (threshold_height_empty_n == 1'b0) | (1'b0 == Hdist_rows_V_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shrink_y_min_read = 1'b1;
    end else begin
        shrink_y_min_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_height_blk_n = threshold_height_empty_n;
    end else begin
        threshold_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_y_max_empty_n == 1'b0) | (shrink_y_min_empty_n == 1'b0) | (threshold_height_empty_n == 1'b0) | (1'b0 == Hdist_rows_V_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_height_read = 1'b1;
    end else begin
        threshold_height_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_y_max_empty_n == 1'b0) | (shrink_y_min_empty_n == 1'b0) | (threshold_height_empty_n == 1'b0) | (1'b0 == Hdist_rows_V_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_322_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_322_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_772 == 1'd0) & (1'b0 == Hdist_data_stream_0_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_772 == 1'd0) & (1'b0 == Hdist_data_stream_0_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_772 == 1'd0) & (1'b0 == Hdist_data_stream_0_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (range_min_empty_n == 1'b0) | (shrink_y_max_empty_n == 1'b0) | (shrink_y_min_empty_n == 1'b0) | (threshold_height_empty_n == 1'b0) | (1'b0 == Hdist_rows_V_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_reg_772 == 1'd0) & (1'b0 == Hdist_data_stream_0_V_empty_n));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_max_r_1_4_i_i_fu_559_p3 = ((sel_tmp1_fu_487_p2[0:0] === 1'b1) ? p_bound_max_r_1_i_i_fu_374_p3 : sel_tmp12_fu_551_p3);

assign bound_min_r_1_5_i_i_fu_528_p3 = ((sel_tmp1_fu_487_p2[0:0] === 1'b1) ? p_bound_min_r_1_i_i_fu_367_p3 : sel_tmp9_fu_520_p3);

assign bound_min_r_1_fu_381_p3 = ((tmp_13_i_i_reg_781_pp0_iter1_reg[0:0] === 1'b1) ? 16'd0 : bound_min_temp_i_i_fu_154);

assign bound_min_temp_2_i_i_fu_590_p3 = ((sel_tmp1_fu_487_p2[0:0] === 1'b1) ? bound_min_r_1_fu_381_p3 : sel_tmp15_fu_582_p3);

assign bound_min_temp_fu_339_p1 = i_i_i_reg_256[15:0];

assign bound_y_max = ((tmp_15_fu_672_p3[0:0] === 1'b1) ? 16'd0 : tmp_31_i_i_fu_680_p2);

assign bound_y_min = ((tmp_23_i_i_fu_647_p2[0:0] === 1'b1) ? tmp_reg_767 : tmp_24_i_i_fu_652_p2);

assign character_num_4_i_i_fu_622_p3 = ((sel_tmp1_fu_487_p2[0:0] === 1'b1) ? p_character_num_i_i_fu_388_p3 : sel_tmp18_fu_614_p3);

assign character_num_fu_432_p2 = (16'd1 + p_character_num_i_i_fu_388_p3);

assign exitcond_fu_322_p2 = ((i_i_i_reg_256 == length_reg_731) ? 1'b1 : 1'b0);

assign i_fu_327_p2 = (i_i_i_reg_256 + 31'd1);

assign icmp_fu_285_p2 = (($signed(tmp_12_fu_275_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign inBlock_3_i_i_fu_498_p2 = (sel_tmp8_fu_473_p3 & not_sel_tmp_fu_492_p2);

assign inBlock_i_i_not_fu_457_p2 = (ap_phi_mux_inBlock_i_i_phi_fu_212_p4 ^ 1'd1);

assign length_fu_291_p3 = ((icmp_reg_726[0:0] === 1'b1) ? tmp_11_reg_721 : 31'd1);

assign not_i_i_fu_356_p2 = (tmp_13_i_i_reg_781_pp0_iter1_reg ^ 1'd1);

assign not_sel_tmp_fu_492_p2 = (sel_tmp1_fu_487_p2 ^ 1'd1);

assign or_cond_i_i_fu_395_p2 = (tmp_14_i_i_reg_802 | p_inBlock_i_i_fu_361_p2);

assign p_bound_max_r_1_i_i_fu_374_p3 = ((tmp_13_i_i_reg_781_pp0_iter1_reg[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_bound_max_r_1_i_i_phi_fu_236_p4);

assign p_bound_min_r_1_i_i_fu_367_p3 = ((tmp_13_i_i_reg_781_pp0_iter1_reg[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_bound_min_r_1_i_i_phi_fu_224_p4);

assign p_bound_min_temp_0_b_fu_424_p3 = ((tmp_19_i_i_fu_418_p2[0:0] === 1'b1) ? bound_min_r_1_fu_381_p3 : p_bound_min_r_1_i_i_fu_367_p3);

assign p_character_num_i_i_fu_388_p3 = ((tmp_13_i_i_reg_781_pp0_iter1_reg[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_character_num_i_i_phi_fu_248_p4);

assign p_inBlock_i_i_fu_361_p2 = (not_i_i_fu_356_p2 & ap_phi_mux_inBlock_i_i_phi_fu_212_p4);

assign p_threshold_fu_267_p1 = threshold_height_dout[15:0];

assign sel_tmp10_fu_536_p3 = ((or_cond_i_i_fu_395_p2[0:0] === 1'b1) ? bound_min_temp_reg_791_pp0_iter1_reg : p_bound_max_r_1_i_i_fu_374_p3);

assign sel_tmp11_fu_543_p3 = ((sel_tmp3_fu_444_p2[0:0] === 1'b1) ? p_bound_max_r_1_i_i_fu_374_p3 : sel_tmp10_fu_536_p3);

assign sel_tmp12_fu_551_p3 = ((sel_tmp7_fu_468_p2[0:0] === 1'b1) ? p_bound_max_r_1_i_i_fu_374_p3 : sel_tmp11_fu_543_p3);

assign sel_tmp13_fu_567_p3 = ((or_cond_i_i_fu_395_p2[0:0] === 1'b1) ? bound_min_r_1_fu_381_p3 : bound_min_temp_reg_791_pp0_iter1_reg);

assign sel_tmp14_fu_574_p3 = ((sel_tmp3_fu_444_p2[0:0] === 1'b1) ? bound_min_r_1_fu_381_p3 : sel_tmp13_fu_567_p3);

assign sel_tmp15_fu_582_p3 = ((sel_tmp7_fu_468_p2[0:0] === 1'b1) ? bound_min_r_1_fu_381_p3 : sel_tmp14_fu_574_p3);

assign sel_tmp16_fu_598_p3 = ((or_cond_i_i_fu_395_p2[0:0] === 1'b1) ? character_num_fu_432_p2 : p_character_num_i_i_fu_388_p3);

assign sel_tmp17_fu_606_p3 = ((sel_tmp3_fu_444_p2[0:0] === 1'b1) ? p_character_num_i_i_fu_388_p3 : sel_tmp16_fu_598_p3);

assign sel_tmp18_fu_614_p3 = ((sel_tmp7_fu_468_p2[0:0] === 1'b1) ? p_character_num_i_i_fu_388_p3 : sel_tmp17_fu_606_p3);

assign sel_tmp1_fu_487_p2 = (tmp_14_i_i_reg_802 & tmp6_fu_481_p2);

assign sel_tmp2_fu_504_p3 = ((or_cond_i_i_fu_395_p2[0:0] === 1'b1) ? p_bound_min_temp_0_b_fu_424_p3 : p_bound_min_r_1_i_i_fu_367_p3);

assign sel_tmp3_fu_444_p2 = (tmp_14_i_i_reg_802 ^ or_cond_i_i_fu_395_p2);

assign sel_tmp4_fu_449_p3 = ((sel_tmp3_fu_444_p2[0:0] === 1'b1) ? p_inBlock_i_i_fu_361_p2 : sel_tmp_fu_438_p2);

assign sel_tmp5_fu_512_p3 = ((sel_tmp3_fu_444_p2[0:0] === 1'b1) ? p_bound_min_r_1_i_i_fu_367_p3 : sel_tmp2_fu_504_p3);

assign sel_tmp6_fu_463_p2 = (tmp_13_i_i_reg_781_pp0_iter1_reg | inBlock_i_i_not_fu_457_p2);

assign sel_tmp7_fu_468_p2 = (tmp_14_i_i_reg_802 & sel_tmp6_fu_463_p2);

assign sel_tmp8_fu_473_p3 = ((sel_tmp7_fu_468_p2[0:0] === 1'b1) ? p_inBlock_i_i_fu_361_p2 : sel_tmp4_fu_449_p3);

assign sel_tmp9_fu_520_p3 = ((sel_tmp7_fu_468_p2[0:0] === 1'b1) ? p_bound_min_r_1_i_i_fu_367_p3 : sel_tmp5_fu_512_p3);

assign sel_tmp_fu_438_p2 = (or_cond_i_i_fu_395_p2 ^ 1'd1);

assign tmp6_fu_481_p2 = (tmp_18_i_i_fu_413_p2 & p_inBlock_i_i_fu_361_p2);

assign tmp_11_fu_271_p1 = Hdist_rows_V_dout[30:0];

assign tmp_12_fu_275_p4 = {{Hdist_rows_V_dout[31:1]}};

assign tmp_13_i_i_fu_333_p2 = ((i_i_i_reg_256 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_14_i_i_fu_348_p2 = ((Hdist_data_stream_0_V_dout < p_threshold_reg_716) ? 1'b1 : 1'b0);

assign tmp_15_cast_i_i_fu_400_p1 = bound_min_temp_reg_791_pp0_iter1_reg;

assign tmp_15_fu_672_p3 = tmp_29_i_i_fu_667_p2[32'd16];

assign tmp_16_cast_i_i_fu_403_p1 = bound_min_r_1_fu_381_p3;

assign tmp_17_i_i_fu_407_p2 = (tmp_15_cast_i_i_fu_400_p1 - tmp_16_cast_i_i_fu_403_p1);

assign tmp_18_i_i_fu_413_p2 = (($signed(tmp_17_i_i_fu_407_p2) < $signed(tmp_cast_i_i_reg_737)) ? 1'b1 : 1'b0);

assign tmp_19_i_i_fu_418_p2 = ((p_character_num_i_i_fu_388_p3 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_20_i_i_fu_343_p2 = ((i_i_i_reg_256 == tmp_5_i_i_reg_742) ? 1'b1 : 1'b0);

assign tmp_21_cast_i_i_fu_635_p1 = bound_min_r_1_5_i_i_reg_815;

assign tmp_22_cast_i_i_cast_fu_643_p1 = tmp_22_i_i_fu_638_p2;

assign tmp_22_i_i_fu_638_p2 = (tmp_21_cast_i_i_fu_635_p1 + tmp_6_cast_i_i_reg_747);

assign tmp_23_i_i_fu_647_p2 = ((tmp_22_cast_i_i_cast_fu_643_p1 > length_reg_731) ? 1'b1 : 1'b0);

assign tmp_24_i_i_fu_652_p2 = (bound_min_r_1_5_i_i_reg_815 + tmp_9_i_i_reg_762);

assign tmp_28_cast_i_i_fu_664_p1 = bound_max_r_1_4_i_i_reg_822;

assign tmp_29_i_i_fu_667_p2 = (tmp_28_cast_i_i_fu_664_p1 - tmp_7_cast_i_i_reg_752);

assign tmp_31_i_i_fu_680_p2 = (bound_max_r_1_4_i_i_reg_822 - tmp_8_i_i_reg_757);

assign tmp_5_i_i_fu_300_p2 = ($signed(31'd2147483647) + $signed(length_fu_291_p3));

assign tmp_6_cast_i_i_fu_306_p1 = shrink_y_min_read_reg_699;

assign tmp_7_cast_i_i_fu_309_p1 = shrink_y_max_read_reg_705;

assign tmp_8_i_i_fu_312_p1 = shrink_y_max_read_reg_705;

assign tmp_9_i_i_fu_315_p1 = shrink_y_min_read_reg_699;

assign tmp_cast_i_i_fu_297_p1 = range_min_read_reg_711;

assign tmp_fu_318_p1 = length_fu_291_p3[15:0];

always @ (posedge ap_clk) begin
    tmp_cast_i_i_reg_737[16] <= 1'b0;
    tmp_6_cast_i_i_reg_747[16:8] <= 9'b000000000;
    tmp_7_cast_i_i_reg_752[16:8] <= 9'b000000000;
    tmp_8_i_i_reg_757[15:8] <= 8'b00000000;
    tmp_9_i_i_reg_762[15:8] <= 8'b00000000;
end

endmodule //find_boundary_shrink
