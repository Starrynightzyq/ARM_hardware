// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module threshold2_top (
s_axi_CONTROL_BUS_AWADDR,
s_axi_CONTROL_BUS_AWVALID,
s_axi_CONTROL_BUS_AWREADY,
s_axi_CONTROL_BUS_WDATA,
s_axi_CONTROL_BUS_WSTRB,
s_axi_CONTROL_BUS_WVALID,
s_axi_CONTROL_BUS_WREADY,
s_axi_CONTROL_BUS_BRESP,
s_axi_CONTROL_BUS_BVALID,
s_axi_CONTROL_BUS_BREADY,
s_axi_CONTROL_BUS_ARADDR,
s_axi_CONTROL_BUS_ARVALID,
s_axi_CONTROL_BUS_ARREADY,
s_axi_CONTROL_BUS_RDATA,
s_axi_CONTROL_BUS_RRESP,
s_axi_CONTROL_BUS_RVALID,
s_axi_CONTROL_BUS_RREADY,
aresetn,
aclk,
input_r_TDATA,
input_r_TKEEP,
input_r_TSTRB,
input_r_TUSER,
input_r_TLAST,
input_r_TID,
input_r_TDEST,
input_r_TVALID,
input_r_TREADY,
output_r_TDATA,
output_r_TKEEP,
output_r_TSTRB,
output_r_TUSER,
output_r_TLAST,
output_r_TID,
output_r_TDEST,
output_r_TVALID,
output_r_TREADY
);

parameter C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6;
parameter C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter RESET_ACTIVE_LOW = 1;

input [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR ;
input s_axi_CONTROL_BUS_AWVALID ;
output s_axi_CONTROL_BUS_AWREADY ;
input [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA ;
input [C_S_AXI_CONTROL_BUS_DATA_WIDTH/8 - 1:0] s_axi_CONTROL_BUS_WSTRB ;
input s_axi_CONTROL_BUS_WVALID ;
output s_axi_CONTROL_BUS_WREADY ;
output [2 - 1:0] s_axi_CONTROL_BUS_BRESP ;
output s_axi_CONTROL_BUS_BVALID ;
input s_axi_CONTROL_BUS_BREADY ;
input [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR ;
input s_axi_CONTROL_BUS_ARVALID ;
output s_axi_CONTROL_BUS_ARREADY ;
output [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA ;
output [2 - 1:0] s_axi_CONTROL_BUS_RRESP ;
output s_axi_CONTROL_BUS_RVALID ;
input s_axi_CONTROL_BUS_RREADY ;

input aresetn ;

input aclk ;


input [24 - 1:0] input_r_TDATA ;
input [3 - 1:0] input_r_TKEEP ;
input [3 - 1:0] input_r_TSTRB ;
input [1 - 1:0] input_r_TUSER ;
input [1 - 1:0] input_r_TLAST ;
input [1 - 1:0] input_r_TID ;
input [1 - 1:0] input_r_TDEST ;
input input_r_TVALID ;
output input_r_TREADY ;


output [8 - 1:0] output_r_TDATA ;
output [1 - 1:0] output_r_TKEEP ;
output [1 - 1:0] output_r_TSTRB ;
output [1 - 1:0] output_r_TUSER ;
output [1 - 1:0] output_r_TLAST ;
output [1 - 1:0] output_r_TID ;
output [1 - 1:0] output_r_TDEST ;
output output_r_TVALID ;
input output_r_TREADY ;


wire [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
wire s_axi_CONTROL_BUS_AWVALID;
wire s_axi_CONTROL_BUS_AWREADY;
wire [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
wire [C_S_AXI_CONTROL_BUS_DATA_WIDTH/8 - 1:0] s_axi_CONTROL_BUS_WSTRB;
wire s_axi_CONTROL_BUS_WVALID;
wire s_axi_CONTROL_BUS_WREADY;
wire [2 - 1:0] s_axi_CONTROL_BUS_BRESP;
wire s_axi_CONTROL_BUS_BVALID;
wire s_axi_CONTROL_BUS_BREADY;
wire [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
wire s_axi_CONTROL_BUS_ARVALID;
wire s_axi_CONTROL_BUS_ARREADY;
wire [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
wire [2 - 1:0] s_axi_CONTROL_BUS_RRESP;
wire s_axi_CONTROL_BUS_RVALID;
wire s_axi_CONTROL_BUS_RREADY;

wire aresetn;


wire [32 - 1:0] sig_threshold2_rows;
wire [32 - 1:0] sig_threshold2_cols;
wire [32 - 1:0] sig_threshold2_max_h;
wire [32 - 1:0] sig_threshold2_min_h;

wire sig_threshold2_ap_rst_n;



threshold2 threshold2_U(
    .rows(sig_threshold2_rows),
    .cols(sig_threshold2_cols),
    .max_h(sig_threshold2_max_h),
    .min_h(sig_threshold2_min_h),
    .ap_rst_n(sig_threshold2_ap_rst_n),
    .ap_clk(aclk),
    .input_r_TDATA(input_r_TDATA),
    .input_r_TKEEP(input_r_TKEEP),
    .input_r_TSTRB(input_r_TSTRB),
    .input_r_TUSER(input_r_TUSER),
    .input_r_TLAST(input_r_TLAST),
    .input_r_TID(input_r_TID),
    .input_r_TDEST(input_r_TDEST),
    .input_r_TVALID(input_r_TVALID),
    .input_r_TREADY(input_r_TREADY),
    .output_r_TDATA(output_r_TDATA),
    .output_r_TKEEP(output_r_TKEEP),
    .output_r_TSTRB(output_r_TSTRB),
    .output_r_TUSER(output_r_TUSER),
    .output_r_TLAST(output_r_TLAST),
    .output_r_TID(output_r_TID),
    .output_r_TDEST(output_r_TDEST),
    .output_r_TVALID(output_r_TVALID),
    .output_r_TREADY(output_r_TREADY)
);

threshold2_CONTROL_BUS_if #(
    .C_ADDR_WIDTH(C_S_AXI_CONTROL_BUS_ADDR_WIDTH),
    .C_DATA_WIDTH(C_S_AXI_CONTROL_BUS_DATA_WIDTH))
threshold2_CONTROL_BUS_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .I_rows(sig_threshold2_rows),
    .I_cols(sig_threshold2_cols),
    .I_max_h(sig_threshold2_max_h),
    .I_min_h(sig_threshold2_min_h),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY));

threshold2_ap_rst_n_if #(
    .RESET_ACTIVE_LOW(RESET_ACTIVE_LOW))
ap_rst_n_if_U(
    .dout(sig_threshold2_ap_rst_n),
    .din(aresetn));

endmodule
