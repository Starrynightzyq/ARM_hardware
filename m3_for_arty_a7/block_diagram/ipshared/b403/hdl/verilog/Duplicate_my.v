// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Duplicate_my (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_rows_V_dout,
        src_rows_V_empty_n,
        src_rows_V_read,
        src_cols_V_dout,
        src_cols_V_empty_n,
        src_cols_V_read,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst0_data_stream_V_din,
        dst0_data_stream_V_full_n,
        dst0_data_stream_V_write,
        dst1_data_stream_V_din,
        dst1_data_stream_V_full_n,
        dst1_data_stream_V_write,
        dst2_data_stream_V_din,
        dst2_data_stream_V_full_n,
        dst2_data_stream_V_write,
        dst3_data_stream_V_din,
        dst3_data_stream_V_full_n,
        dst3_data_stream_V_write,
        dst4_data_stream_V_din,
        dst4_data_stream_V_full_n,
        dst4_data_stream_V_write,
        dst5_data_stream_V_din,
        dst5_data_stream_V_full_n,
        dst5_data_stream_V_write,
        dst6_data_stream_V_din,
        dst6_data_stream_V_full_n,
        dst6_data_stream_V_write,
        dst7_data_stream_V_din,
        dst7_data_stream_V_full_n,
        dst7_data_stream_V_write,
        dst8_data_stream_V_din,
        dst8_data_stream_V_full_n,
        dst8_data_stream_V_write,
        dst9_data_stream_V_din,
        dst9_data_stream_V_full_n,
        dst9_data_stream_V_write,
        dst10_data_stream_V_din,
        dst10_data_stream_V_full_n,
        dst10_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] src_rows_V_dout;
input   src_rows_V_empty_n;
output   src_rows_V_read;
input  [5:0] src_cols_V_dout;
input   src_cols_V_empty_n;
output   src_cols_V_read;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst0_data_stream_V_din;
input   dst0_data_stream_V_full_n;
output   dst0_data_stream_V_write;
output  [7:0] dst1_data_stream_V_din;
input   dst1_data_stream_V_full_n;
output   dst1_data_stream_V_write;
output  [7:0] dst2_data_stream_V_din;
input   dst2_data_stream_V_full_n;
output   dst2_data_stream_V_write;
output  [7:0] dst3_data_stream_V_din;
input   dst3_data_stream_V_full_n;
output   dst3_data_stream_V_write;
output  [7:0] dst4_data_stream_V_din;
input   dst4_data_stream_V_full_n;
output   dst4_data_stream_V_write;
output  [7:0] dst5_data_stream_V_din;
input   dst5_data_stream_V_full_n;
output   dst5_data_stream_V_write;
output  [7:0] dst6_data_stream_V_din;
input   dst6_data_stream_V_full_n;
output   dst6_data_stream_V_write;
output  [7:0] dst7_data_stream_V_din;
input   dst7_data_stream_V_full_n;
output   dst7_data_stream_V_write;
output  [7:0] dst8_data_stream_V_din;
input   dst8_data_stream_V_full_n;
output   dst8_data_stream_V_write;
output  [7:0] dst9_data_stream_V_din;
input   dst9_data_stream_V_full_n;
output   dst9_data_stream_V_write;
output  [7:0] dst10_data_stream_V_din;
input   dst10_data_stream_V_full_n;
output   dst10_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_rows_V_read;
reg src_cols_V_read;
reg src_data_stream_V_read;
reg dst0_data_stream_V_write;
reg dst1_data_stream_V_write;
reg dst2_data_stream_V_write;
reg dst3_data_stream_V_write;
reg dst4_data_stream_V_write;
reg dst5_data_stream_V_write;
reg dst6_data_stream_V_write;
reg dst7_data_stream_V_write;
reg dst8_data_stream_V_write;
reg dst9_data_stream_V_write;
reg dst10_data_stream_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src_rows_V_blk_n;
reg    src_cols_V_blk_n;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_419;
reg    dst0_data_stream_V_blk_n;
reg    dst1_data_stream_V_blk_n;
reg    dst2_data_stream_V_blk_n;
reg    dst3_data_stream_V_blk_n;
reg    dst4_data_stream_V_blk_n;
reg    dst5_data_stream_V_blk_n;
reg    dst6_data_stream_V_blk_n;
reg    dst7_data_stream_V_blk_n;
reg    dst8_data_stream_V_blk_n;
reg    dst9_data_stream_V_blk_n;
reg    dst10_data_stream_V_blk_n;
reg   [31:0] t_V_2_reg_359;
wire  signed [31:0] rows_V_fu_370_p1;
reg  signed [31:0] rows_V_reg_400;
reg    ap_block_state1;
wire  signed [31:0] cols_V_fu_374_p1;
reg  signed [31:0] cols_V_reg_405;
wire   [0:0] exitcond2_i_fu_378_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_383_p2;
reg   [31:0] i_V_reg_414;
wire   [0:0] exitcond_i_fu_389_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] j_V_fu_394_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [31:0] t_V_reg_348;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_378_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_378_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_378_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_fu_389_p2 == 1'd0))) begin
        t_V_2_reg_359 <= j_V_fu_394_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_378_p2 == 1'd0))) begin
        t_V_2_reg_359 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_348 <= i_V_reg_414;
    end else if ((~((src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_348 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_V_reg_405 <= cols_V_fu_374_p1;
        rows_V_reg_400 <= rows_V_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_reg_419 <= exitcond_i_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_414 <= i_V_fu_383_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_389_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_378_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst0_data_stream_V_blk_n = dst0_data_stream_V_full_n;
    end else begin
        dst0_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst0_data_stream_V_write = 1'b1;
    end else begin
        dst0_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst10_data_stream_V_blk_n = dst10_data_stream_V_full_n;
    end else begin
        dst10_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst10_data_stream_V_write = 1'b1;
    end else begin
        dst10_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst1_data_stream_V_blk_n = dst1_data_stream_V_full_n;
    end else begin
        dst1_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst1_data_stream_V_write = 1'b1;
    end else begin
        dst1_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst2_data_stream_V_blk_n = dst2_data_stream_V_full_n;
    end else begin
        dst2_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst2_data_stream_V_write = 1'b1;
    end else begin
        dst2_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst3_data_stream_V_blk_n = dst3_data_stream_V_full_n;
    end else begin
        dst3_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst3_data_stream_V_write = 1'b1;
    end else begin
        dst3_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst4_data_stream_V_blk_n = dst4_data_stream_V_full_n;
    end else begin
        dst4_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst4_data_stream_V_write = 1'b1;
    end else begin
        dst4_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst5_data_stream_V_blk_n = dst5_data_stream_V_full_n;
    end else begin
        dst5_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst5_data_stream_V_write = 1'b1;
    end else begin
        dst5_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst6_data_stream_V_blk_n = dst6_data_stream_V_full_n;
    end else begin
        dst6_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst6_data_stream_V_write = 1'b1;
    end else begin
        dst6_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst7_data_stream_V_blk_n = dst7_data_stream_V_full_n;
    end else begin
        dst7_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst7_data_stream_V_write = 1'b1;
    end else begin
        dst7_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst8_data_stream_V_blk_n = dst8_data_stream_V_full_n;
    end else begin
        dst8_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst8_data_stream_V_write = 1'b1;
    end else begin
        dst8_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst9_data_stream_V_blk_n = dst9_data_stream_V_full_n;
    end else begin
        dst9_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        dst9_data_stream_V_write = 1'b1;
    end else begin
        dst9_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_378_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_blk_n = src_cols_V_empty_n;
    end else begin
        src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_read = 1'b1;
    end else begin
        src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_419 == 1'd0))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_rows_V_blk_n = src_rows_V_empty_n;
    end else begin
        src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_rows_V_read = 1'b1;
    end else begin
        src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_378_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_fu_389_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_fu_389_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst10_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst9_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst8_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst7_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst6_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst5_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst4_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst3_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst2_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst1_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst0_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((src_data_stream_V_empty_n == 1'b0) & (exitcond_i_reg_419 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst10_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst9_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst8_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst7_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst6_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst5_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst4_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst3_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst2_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst1_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst0_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((src_data_stream_V_empty_n == 1'b0) & (exitcond_i_reg_419 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst10_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst9_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst8_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst7_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst6_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst5_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst4_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst3_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst2_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst1_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst0_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((src_data_stream_V_empty_n == 1'b0) & (exitcond_i_reg_419 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((dst10_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst9_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst8_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst7_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst6_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst5_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst4_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst3_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst2_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst1_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((dst0_data_stream_V_full_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)) | ((src_data_stream_V_empty_n == 1'b0) & (exitcond_i_reg_419 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cols_V_fu_374_p1 = $signed(src_cols_V_dout);

assign dst0_data_stream_V_din = src_data_stream_V_dout;

assign dst10_data_stream_V_din = src_data_stream_V_dout;

assign dst1_data_stream_V_din = src_data_stream_V_dout;

assign dst2_data_stream_V_din = src_data_stream_V_dout;

assign dst3_data_stream_V_din = src_data_stream_V_dout;

assign dst4_data_stream_V_din = src_data_stream_V_dout;

assign dst5_data_stream_V_din = src_data_stream_V_dout;

assign dst6_data_stream_V_din = src_data_stream_V_dout;

assign dst7_data_stream_V_din = src_data_stream_V_dout;

assign dst8_data_stream_V_din = src_data_stream_V_dout;

assign dst9_data_stream_V_din = src_data_stream_V_dout;

assign exitcond2_i_fu_378_p2 = ((t_V_reg_348 == rows_V_reg_400) ? 1'b1 : 1'b0);

assign exitcond_i_fu_389_p2 = ((t_V_2_reg_359 == cols_V_reg_405) ? 1'b1 : 1'b0);

assign i_V_fu_383_p2 = (t_V_reg_348 + 32'd1);

assign j_V_fu_394_p2 = (t_V_2_reg_359 + 32'd1);

assign rows_V_fu_370_p1 = $signed(src_rows_V_dout);

assign start_out = real_start;

endmodule //Duplicate_my
